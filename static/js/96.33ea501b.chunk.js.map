{"version":3,"file":"static/js/96.33ea501b.chunk.js","mappings":"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","sources":["../node_modules/@pkmn/protocol/src/index.ts","../node_modules/@pkmn/login/index.ts","utils/print-colored.ts","utils/connection.ts","utils/user.ts","utils/bot.ts"],"sourcesContent":["import {\n  As,\n  BoostID,\n  FieldCondition,\n  GameType,\n  GenderName,\n  GenerationNum,\n  HPColor,\n  ID,\n  MoveTarget,\n  Player,\n  SideCondition,\n  SideID,\n  StatsTable,\n  StatusName,\n  TypeName,\n  Weather,\n} from '@pkmn/types';\n\nexport type {ID} from '@pkmn/types';\n\nexport namespace Protocol {\n  export type PositionLetter = 'a' | 'b' | 'c';\n  /**\n   * A Pokémon ID is in the form `POSITION: NAME`.\n   *\n   *   - `POSITION` is the spot that the Pokémon is in: it consists of the `PLAYER` of the player\n   *     (see `|player|`), followed by a position letter (`a` in singles).\n   *\n   * An inactive Pokémon will not have a position letter.\n   *\n   * In doubles and triples battles, `a` will refer to the leftmost Pokémon from its trainer's\n   * perspective (so the leftmost on your team, and the rightmost on your opponent's team, so\n   * `p1a` faces `p2c`, etc).\n   *\n   * So the layout looks like:\n   *\n   * Doubles, player 1's perspective:\n   *\n   *    p2b p2a\n   *    p1a p1b\n   *\n   * Doubles, player 2's perspective:\n   *\n   *    p1b p1a\n   *    p2a p2b\n   *\n   * In multi and free-for-all battles, players are grouped by parity. That is, `p1` and `p3` share\n   * a side, as do `p2` and `p4`. The position letters still follow the same conventions as in\n   * double battles, so the layout looks like:\n   *\n   * Multi, player 1's perspective\n   *\n   *    p4b p2a\n   *    p1a p3b\n   *\n   *   - `NAME` is the nickname of the Pokémon (or the species name, if no nickname is given).\n   *\n   * For example: `p1a: Sparky` could be a Charizard named Sparky. `p1: Dragonite` could be an\n   * inactive Dragonite being healed by Heal Bell.\n   *\n   * For most commands, you can just use the position information in the Pokémon ID to identify\n   * the Pokémon. Only a few commands actually change the Pokémon in that position (`|switch|`\n   * switching, `|replace|` illusion dropping, `|drag|` phazing, and `|detailschange|` permanent\n   * forme changes), and these all specify `DETAILS` for you to perform updates with.\n   */\n  export type PokemonIdent = string & As<'PokemonIdent'>;\n  /**\n   * A comma-separated list of all information about a Pokemon visible on the battle screen:\n   * species, level, gender, shininess. So it starts with `SPECIES`, adding `, L##` if it's not\n   * level 100, `, M` if it's male, `, F` if it's female, `, shiny` if it's shiny.\n   * In Gen 9, `, tera:TYPE` will be appended if the Pokemon has Terastallized.\n   *\n   * So, for instance, `Deoxys-Speed` is a level 100 non-shiny genderless Deoxys (Speed forme).\n   * `Sawsbuck, L50, F, shiny` is a level 50 shiny female Sawsbuck (Spring form).\n   *\n   * In Team Preview, `DETAILS` will not include information not available in Team Preview (in\n   * particular, level and shininess will be left off), and for Pokémon whose forme isn't revealed\n   * in Team Preview, it will be given as `-*`. So, for instance, an Arceus in Team Preview would\n   * have the details string `Arceus-*`, no matter what kind of Arceus it is.\n   */\n  export type PokemonDetails = string & As<'PokemonDetails'>;\n  /** `` `${ident}|${details}` ``. Tracked for ease of searching. */\n  export type PokemonSearchID = string & As<'PokemonSearchID'>;\n  /**\n   * The switched Pokémon has HP `HP`, and status `STATUS`. `HP` is specified as a fraction; if it\n   * is your own Pokémon then it will be `CURRENT/MAX`, if not, it will be `/100` if HP Percentage\n   * Mod is in effect and `/48` otherwise. `STATUS` can be left blank, or it can be `slp`, `par`\n   * etc.\n   *\n   * If `HP` is 0, `STATUS` should be ignored. The current behavior is for `STATUS` to be `fnt`,\n   * but this may change and should not be relied upon.\n   */\n  export type PokemonHPStatus = string & As<'PokemonHPStatus'>;\n\n  /**\n   * A user, the first character being their rank (users with no rank are represented by a space),\n   * and the rest of the string being their username.\n   */\n  export type Username = string & As<'Username'>;\n  /**\n   * The player's avatar identifier (usually a number, but other values can be used for custom\n   * avatars).\n   */\n  export type AvatarIdent = string & As<'AvatarIdent'>;\n  export type Side = string & As<'Side'>;\n\n  /**\n   * The name of an 'effect' (move, ability, item, status, etc).\n   *\n   * Effects which are pokemon, moves, abilities or items are prefixed by `pokemon: `, ß`move: `,\n   * `ability: ` and `item: ` respectively, whereas all other effects are unprefixed. For example,\n   * `move: Spectral Thief` or `confusion`.\n   */\n  export type EffectName = string & As<'EffectName'> | MoveEffectName;\n  /** The name of a move 'effect', prefixed with `move: `. */\n  export type MoveEffectName = string & As<'MoveEffectName'>;\n  /** The name of a Pokemon species (unprefixed). */\n  export type SpeciesName = string & As<'SpeciesName'>;\n  /** The name of an ability (unprefixed). */\n  export type AbilityName = string & As<'AbilityName'>;\n  /** The name of an item (unprefixed). */\n  export type ItemName = string & As<'ItemName'>;\n  /** The name of a move (unprefixed). */\n  export type MoveName = string & As<'MoveName'>;\n  /** The name of an animation (unprefixed). */\n  export type AnimationName = (string & As<'AnimationName'>) | MoveName;\n\n  /** An arbitrary message to be displayed as is. */\n  export type Message = string & As<'Message'>;\n  /** A choice string previously received by the server. */\n  export type Choice = string & As<'Choice'>;\n  /** UNIX timestamp; (the number of seconds since 1970). */\n  export type Timestamp = string & As<'Timestamp'>;\n\n  /** The title of a notification, usually displayed as bold. */\n  export type NotificationTitle = string & As<'NotificationTitle'>;\n  /** Token used to determine whether a notification should highlight a user.  */\n  export type HighlightToken = string & As<'HighlightToken'>;\n  /** Group name matched by `|tempnotify|` and `|tempnotifyoff|` messages. */\n  export type TempNotifyName = string & As<'TempNotifyName'>;\n\n  /** HTML which should be sanitized before display. */\n  export type HTML = string & As<'HTML'>;\n  /** A name to allow for matching two different `|uhtml|` messages. */\n  export type UHTMLName = string & As<'UHTMLName'>;\n  /** CSS selector name used in `|selectorhtml|` messages. */\n  export type SelectorName = string & As<'SelectorName'>;\n  /** A string which should be parsed as JSON. */\n  export type JSON = string & As<'JSON'>;\n\n  /** The ID of a Room, may contains non-alphanumerics. */\n  export type RoomID = string & As<'RoomID'>;\n  /**\n   * The title of the room. The title is _not_ guaranteed to resemble  the room ID; for instance,\n   * room `battle-gen7uu-779767714` could have title `Alice vs. Bob`.\n   */\n  export type RoomTitle = string & As<'RoomTitle'>;\n  /**\n   * `USERLIST` is a comma-separated list of `USER`s, sent from chat rooms when they're joined.\n   * Optionally, a `USER` can end in `@` followed by a user status message. A `STATUS` starting\n   * in `!` indicates the user is away.\n   */\n  export type UserList = string & As<'UserList'>;\n\n  /** A number encoded as a string. */\n  export type Num = string & As<'Num'>;\n  /**\n   * A `|`-separated list of `FORMAT`s. `FORMAT` is a format name with one or more of these\n   * suffixes: `,#` if the format uses random teams, `,,` if the format is only available for\n   * searching, and `,` if the format is only available for challenging.\n   *\n   * Sections are separated by two vertical bars with the number of the column of that section\n   * prefixed by `,` in it. After that follows the name of the section and another vertical bar.\n   */\n  export type FormatsList = string & As<'FormatsList'>;\n  /**\n   * Either `Elimination` or `Round Robin` and describes the type of bracket that will be used.\n   * `Elimination` includes a prefix that denotes the number of times a player can lose before\n   * being eliminated (`Single`, `Double`, etc.). `Round Robin` includes the prefix `Double` if\n   * every matchup will battle twice.\n   */\n  export type Generator = string & As<'Generator'>;\n  /**\n   * An array of length 2 that denotes the number of Pokemon `USER1` had left and the number of\n   * Pokemon `USER2` had left.\n   */\n  export type Score = string & As<'Score'>;\n  /** The name of a metagame format. */\n  export type FormatName = string & As<'FormatName'>;\n  /** Rules affecting the battle, encoded as `RULE: DESCRIPTION`. */\n  export type Rule = string & As<'Rule'>;\n  /** Takes the form of a comma-separated list of `BoostID` abbreviations. */\n  export type BoostIDs = string & As<'BoostIDs'>;\n  export type Seed = string & As<'Seed'>;\n  export type Slots = string & As<'Slots'>;\n  export type Types = string & As<'Types'>;\n  export type Nickname = string & As<'Nickname'>;\n  export type StatDisplayName = string & As<'StatDisplayName'>;\n\n  export type Reason = StatusName | 'partiallytrapped' | 'flinch' | 'nopp' | 'recharge';\n\n  export type QueryType =\n    'userdetails' | 'roomlist' | 'rooms' | 'laddertop' | 'roominfo' | 'savereplay' | 'debug';\n\n  /** An unparsed JSON string containing `Challenges` information. */\n  export type ChallengesJSON = string & As<'ChallengesJSON'>;\n  /** An unparsed JSON string containing `SearchState` information. */\n  export type SearchStateJSON = string & As<'SearchStateJSON'>;\n  /** An unparsed JSON string containing `TournmanetUpdate` information. */\n  export type TournamentUpdateJSON = string & As<'TournamentUpdateJSON'>;\n  /** An unparsed JSON string containing `TournamentEnded` information. */\n  export type TournamentEndedJSON = string & As<'TournamentEndedJSON'>;\n  /** An unparsed JSON string containing `Request` information. */\n  export type RequestJSON = string & As<'RequestJSON'>;\n  /** An unparsed JSON string containing `CustomGroups` information. */\n  export type CustomGroupsJSON = string & As<'CustomGroupsJSON'>;\n\n  /**\n   * A JSON object representing the current state of who the user is challenging and who is\n   * challenging the user. You'll get this whenever challenges update (when you challenge someone,\n   * when you receive a challenge, when you or someone you challenged accepts/rejects/cancels a\n   * challenge).\n   *\n   *   - `challengesFrom` will be a `{userid: format}` table of received challenges.\n   *   - `challengeTo` will be a challenge if you're challenging someone, or `null` if you haven't.\n   *\n   * If you are challenging someone, `challengeTo` will be in the format:\n   *\n   *   `{\"to\":\"player1\",\"format\":\"gen7randombattle\"}`.\n   *\n   * To challenge someone, send:\n   *\n   *    /utm TEAM\n   *    /challenge USERNAME, FORMAT\n   *\n   * To cancel a challenge you made to someone, send:\n   *\n   *    /cancelchallenge USERNAME\n   *\n   * To reject a challenge you received from someone, send:\n   *\n   *    /reject USERNAME\n   *\n   * To accept a challenge you received from someone, send:\n   *\n   *    /utm TEAM\n   *    /accept USERNAME\n   *\n   * Teams are in packed format. `TEAM` can also be `null`, if the format doesn't require user-built\n   * teams, such as Random Battle.\n   *\n   * Invalid teams will send a `|popup|` with validation errors, and the `/accept` or `/challenge`\n   * command won't take effect.\n   *\n   * If the challenge is accepted, you will receive a room initialization message.\n   */\n  export interface Challenges {\n    challengesFrom: {[userid in ID]: ID};\n    challengeTo: null | {o: Username; format: ID};\n  }\n\n  /**\n   * A JSON object representing the current state of what battles the user is currently searching\n   * for. You'll get this whenever searches update (when you search, cancel a search, or you start\n   * or end a battle).\n   *\n   *   - `searching` will be an array of format IDs you're currently searching for games in.\n   *   - `games` will be a `{roomid: title}` table of games you're currently in. Note that this\n   *     includes ALL games, so `|updatesearch|` will be sent when you start/end challenge battles,\n   *     and even non-Pokémon games like Mafia.\n   *\n   * To search for a battle against a random opponent, send:\n   *\n   *    /utm TEAM\n   *    /search FORMAT\n   *\n   * Teams are in packed format. `TEAM` can also be `null`, if the format doesn't require\n   * user-built teams, such as Random Battle.\n   *\n   * To cancel searching, send:\n   *\n   *    /cancelsearch\n   */\n  export interface SearchState {\n    searching: ID[];\n    games: {[roomid in RoomID]: RoomTitle};\n  }\n\n  /** A JSON object that reflects the custom user groups configured on the server. */\n  export type CustomGroups = CustomGroup[];\n  export interface CustomGroup {\n    symbol: string;\n    name: string | null;\n    type: 'leadership' | 'staff' | 'normal' | 'punishment';\n  }\n\n  /**\n   * A JSON object representing the changes in the tournament since the last update you\n   * received or the start of the tournament. These include:\n   *\n   *   - `format`: the tournament's custom name or the format being used\n   *   - `teambuilderFormat`: the format being used; sent if a custom name was set\n   *   - `isStarted`: whether or not the tournament has started\n   *   - `isJoined`: whether or not you have joined the tournament\n   *   - `generator`: the type of bracket being used by the tournament\n   *   - `playerCap`: the player cap that was set or 0 if it was removed\n   *   - `bracketData`: an object representing the current state of the bracket\n   *   - `challenges`: a list of opponents that you can currently challenge\n   *   - `challengeBys`: a list of opponents that can currently challenge you\n   *   - `challenged`: the name of the opponent that has challenged you\n   *   - `challenging`: the name of the opponent that you are challenging\n   */\n  export interface TournamentUpdate {\n    format?: FormatName;\n    teambuilderFormat?: FormatName;\n    isStarted?: boolean;\n    isJoined?: boolean;\n    generator?: Generator;\n    playerCap?: number;\n    bracketData?: {[key: string]: any};\n    challenges?: Username[];\n    challengeBys?: Username[];\n    challenged?: Username[];\n    challenging?: Username[];\n  }\n\n  /**\n   * A JSON object send when a tournament ends containing:\n   *\n   *   - `results`: the name(s) of the winner(s) of the tournament\n   *   - `format`: the tournament's custom name or the format that was used\n   *   - `generator`: the type of bracket that was used by the tournament\n   *   - `bracketData`: an object representing the final state of the bracket\n   */\n  export interface TournamentEnded {\n    results: Username[];\n    format: FormatName;\n    generator: Generator;\n    bracketData: {[key: string]: any};\n  }\n\n  export type Request = MoveRequest | SwitchRequest | TeamRequest | WaitRequest;\n\n  export interface MoveRequest {\n    requestType: 'move';\n    rqid: number;\n    side: Request.SideInfo;\n    active: (Request.ActivePokemon | null)[];\n    noCancel?: boolean;\n  }\n\n  export interface SwitchRequest {\n    requestType: 'switch';\n    rqid: number;\n    side: Request.SideInfo;\n    forceSwitch: [true] & boolean[];\n    noCancel?: boolean;\n  }\n\n  export interface TeamRequest {\n    requestType: 'team';\n    rqid: number;\n    side: Request.SideInfo;\n    maxTeamSize?: number;\n    noCancel?: boolean;\n  }\n\n  export interface WaitRequest {\n    requestType: 'wait';\n    rqid: number;\n    side: undefined;\n    noCancel?: boolean;\n  }\n\n  export namespace Request {\n    export interface SideInfo {\n      name: Username;\n      id: SideID;\n      pokemon: Pokemon[];\n    }\n\n    export interface ActivePokemon {\n      moves: Array<{\n        name: MoveName;\n        id: ID;\n        pp: number;\n        maxpp: number;\n        target: MoveTarget;\n        disabled?: boolean;\n      }>;\n      maxMoves?: Array<{\n        // name: MoveName;\n        id: ID;\n        target: MoveTarget;\n        disabled?: boolean;\n      }>;\n      zMoves?: Array<{\n        name: MoveName;\n        id: ID;\n        target: MoveTarget;\n      } | null>;\n      canDynamax?: boolean;\n      canGigantamax?: boolean;\n      canMegaEvo?: boolean;\n      canUltraBurst?: boolean;\n      canTerastallize?: string;\n      trapped?: boolean;\n      maybeTrapped?: boolean;\n      maybeDisabled?: boolean;\n    }\n\n    export interface Pokemon extends DetailedPokemon, PokemonHealth {\n      active?: boolean;\n      details: PokemonDetails;\n      ident: PokemonIdent;\n      pokeball: ID;\n      ability: ID;\n      baseAbility: ID;\n      condition: PokemonHPStatus;\n      item: ID;\n      moves: ID[];\n      stats: Omit<StatsTable, 'hp'>;\n      commanding?: boolean;\n      reviving?: boolean;\n      teraType?: TypeName;\n    }\n  }\n\n  export interface RoomInitArgs {\n    /**\n     * `|init|ROOMTYPE`\n     *\n     * The first message received from a room when you join it. `ROOMTYPE` is one of:\n     * `chat` or `battle`\n     */\n    '|init|': readonly ['init', 'chat' | 'battle'];\n    /**\n     * `|title|TITLE`\n     *\n     * `TITLE` is the title of the room. The title is _not_ guaranteed to resemble\n     * the room ID; for instance, room `battle-gen7uu-779767714` could have title `Alice vs. Bob`.\n     */\n    '|title|': readonly ['title', RoomTitle];\n    /**\n     * `|users|USERLIST`\n     *\n     * `USERLIST` is a comma-separated list of `USER`s, sent from chat rooms when they're joined.\n     * Optionally, a `USER` can end in `@` followed by a user status message. A `STATUS` starting\n     * in `!` indicates the user is away.\n     */\n    '|users|': readonly ['users', UserList];\n  }\n\n  export type RoomInitArgName = keyof RoomInitArgs;\n  export type RoomInitArgType = RoomInitArgs[RoomInitArgName];\n\n  export interface RoomMessageArgs {\n    /**\n     * `||MESSAGE` or `MESSAGE`\n     *\n     * We received a message `MESSAGE`, which should be displayed directly in the room's log.\n     */\n    '||': readonly ['', Message];\n    /**\n     * `|html|HTML`\n     *\n     * We received an HTML message, which should be sanitized and displayed directly in the\n     * room's log.\n     */\n    '|html|': readonly ['html', HTML];\n    /**\n     * `|uhtml|NAME|HTML`\n     *\n     * We recieved an HTML message (NAME) that can change what it's displaying, this is used in\n     * things like our Polls system, for example.\n     */\n    '|uhtml|': readonly ['uhtml', UHTMLName, HTML];\n    /**\n     * `|uhtmlchange|NAME|HTML`\n     *\n     * Changes the HTML display of the `|uhtml|` message named (NAME).\n     */\n    '|uhtmlchange|': readonly ['uhtmlchange', UHTMLName, HTML];\n    /**\n     * `|join|USER`, `|j|USER`, or `|J|USER`\n     *\n     * `USER` joined the room. Optionally, `USER` may be appended with `@!` to indicate that the\n     * user is away or busy. The final boolean is true if the join was intended to be silent (`J`).\n     */\n    '|join|': readonly ['join', Username, boolean];\n    /**\n     * `|leave|USER`, `|l|USER`, or `|L|USER`\n     *\n     * `USER` left the room. The final boolean is true if the leave was intended to be silent (`L`).\n     */\n    '|leave|': readonly ['leave', Username, boolean];\n    /**\n     * `|name|USER|OLDID`, `|n|USER|OLDID`, or `|N|USER|OLDID`\n     *\n     * A user changed name to `USER`, and their previous userid was `OLDID`. Optionally, `USER` may\n     * be appended with `@!` to indicate that the user is away or busy. The final boolean is true if\n     * the name change was intended to be silent (`N`).\n     */\n    '|name|': readonly ['name', Username, ID, boolean];\n    /**\n     * `|chat|USER|MESSAGE` or `|c|USER|MESSAGE`\n     *\n     * `USER` said `MESSAGE`. Note that `MESSAGE` can contain `|` characters.\n     *\n     * If `MESSAGE` starts with `/`, it is a special message. For instance, `/me TEXT` or\n     * `/announce TEXT` or `/uhtml HTML`. A lot of these message types are abused to embed protocol\n     * messages in PMs (for instance, `/uhtml` is a stopgap before the client is rewritten to\n     * support `|uhtml|` etc in  PMs).\n     *\n     * If the server wants clients to actually render a message starting with `/`, it will send\n     * message starting with `//` (exactly like how users need to send those messages).\n     */\n    '|chat|': readonly ['chat', Username, Message];\n    /**\n     * `|notify|TITLE|MESSAGE`\n     *\n     * Send a notification with `TITLE` and `MESSAGE` (usually, `TITLE` will be bold, and `MESSAGE`\n     * is optional).\n     *\n     * `|notify|TITLE|MESSAGE|HIGHLIGHTTOKEN`\n     *\n     * Send a notification as above, but only if the user would be notified by a chat message\n     * containing `HIGHLIGHTTOKEN` (i.e. if `HIGHLIGHTTOKEN` contains words added to `/highlight`,\n     * or their username by default).\n     */\n    '|notify|':\n    | readonly ['notify', NotificationTitle, Message?]\n    | readonly ['notify', NotificationTitle, Message, HighlightToken];\n    /**\n     * `|:|TIMESTAMP`\n     *\n     * `:` is the current time according to the server, so that times can be adjusted and reported\n     * in the local time in the case of a discrepancy.\n     *\n     * The exact fate of this command is uncertain - it may or may not be replaced with a more\n     * generalized way to transmit timestamps at some point.\n     */\n    '|:|': readonly [':', Timestamp];\n    /**\n     * `|c:|TIMESTAMP|USER|MESSAGE`\n     *\n     * `c:` is pretty much the same as `c`, but also comes with a UNIX timestamp; (the number of\n     * seconds since 1970). This is used for accurate timestamps in chat logs.\n     */\n    '|c:|': ['c:', Timestamp, Username, Message];\n    /**\n     * `|battle|ROOMID|USER1|USER2` or `|b|ROOMID|USER1|USER2`\n     *\n     * A battle started between `USER1` and `USER2`, and the battle room has ID `ROOMID`.\n     */\n    '|battle|': readonly ['battle', RoomID, Username, Username];\n  }\n\n  export type RoomMessageArgName = keyof RoomMessageArgs;\n  export type RoomMessageArgType = RoomMessageArgs[RoomMessageArgName];\n\n  export type RoomArgs = RoomInitArgs & RoomMessageArgs;\n  export type RoomArgName = RoomInitArgName | RoomMessageArgName;\n  export type RoomArgsType = RoomArgs[RoomArgName];\n\n  export interface GlobalArgs {\n    /**\n     * `|popup|MESSAGE`\n     *\n     * Show the user a popup containing `MESSAGE`. `||` denotes a newline in the popup.\n     */\n    '|popup|': readonly ['popup', Message];\n    /**\n     * `|pm|SENDER|RECEIVER|MESSAGE`\n     *\n     * A PM was sent from `SENDER` to `RECEIVER` containing the message `MESSAGE`.\n     */\n    '|pm|': readonly ['pm', Username, Username, Message];\n    /**\n     * `|usercount|USERCOUNT`\n     *\n     * `USERCOUNT` is the number of users on the server.\n     */\n    '|usercount|': readonly ['usercount', Num];\n    /**\n     * `|nametaken|USERNAME|MESSAGE`\n     *\n     * You tried to change your username to `USERNAME` but it failed for the reason described in\n     * `MESSAGE`.\n     */\n    '|nametaken|': readonly ['nametaken', Username, Message];\n    /**\n     * `|challstr|CHALLSTR`\n     *\n     * You just connected to the server, and we're giving you some information you'll need to log\n     * in.\n     *\n     * If you're already logged in and have session cookies, you can make an HTTP GET request to\n     * `http://play.pokemonshowdown.com/action.php?act=upkeep&challstr=CHALLSTR`\n     *\n     * Otherwise, you'll need to make an HTTP POST request to\n     * `http://play.pokemonshowdown.com/action.php` with the data\n     * `act=login&name=USERNAME&pass=PASSWORD&challstr=CHALLSTR`\n     *\n     * `USERNAME` is your username and `PASSWORD` is your password, and `CHALLSTR` is the value you\n     * got from `|challstr|`. Note that `CHALLSTR` contains `|` characters. (Also feel free to make\n     * the request to `https://` if your client supports it.)\n     *\n     * Either way, the response will start with `]` and be followed by a JSON object which we'll\n     * call `data`.\n     *\n     * Finish logging in (or renaming) by sending: `/trn USERNAME,0,ASSERTION` where `USERNAME` is\n     * your desired username and `ASSERTION` is `data.assertion`.\n     */\n    '|challstr|': readonly ['challstr', string];\n    /**\n     * `|customgroups|JSON\n     *\n     * `JSON` is a JSON object that reflects the custom user groups configured on the server.\n     */\n    '|customgroups|': readonly ['customgroups', CustomGroupsJSON];\n    /**\n     * `|updateuser|USER|NAMED|AVATAR|SETTINGS`\n     *\n     * Your name, avatar or settings were successfully changed. Your rank and username are now\n     * `USER`. Optionally, `USER` may be appended with `@!` to indicate that you are away or busy.\n     * `NAMED` will be `0` if you are a guest or `1` otherwise. Your avatar is now `AVATAR`.\n     * `SETTINGS` is a JSON object representing the current state of various user settings.\n     */\n    '|updateuser|': readonly ['updateuser', Username, '0' | '1', AvatarIdent, JSON];\n    /**\n     * `|formats|FORMATSLIST`\n     *\n     * This server supports the formats specified in `FORMATSLIST`. `FORMATSLIST` is a `|`-separated\n     * list of `FORMAT`s. `FORMAT` is a format name with one or more of these suffixes: `,#` if the\n     * format uses random teams, `,,` if the format is only available for searching, and `,` if the\n     * format is only available for challenging.\n     *\n     * Sections are separated by two vertical bars with the number of the column of that section\n     * prefixed by `,` in it. After that follows the name of the section and another vertical bar.\n     */\n    '|formats|': readonly ['formats', FormatsList];\n    /**\n     * `|updatesearch|JSON`\n     *\n     * `JSON` is a JSON object representing the current state of what battles the user is currently\n     * searching for. You'll get this whenever searches update (when you search, cancel a search,\n     * or you start or end a battle).\n     */\n    '|updatesearch|': readonly ['updatesearch', SearchStateJSON];\n    /**\n     * `|updatechallenges|JSON`\n     *\n     * `JSON` is a JSON object representing the current state of who the user is challenging and\n     * who is challenging the user. You'll get this whenever challenges update (when you challenge\n     * someone, when you receive a challenge, when you or someone you challenged\n     * accepts/rejects/cancels a challenge).\n     */\n    '|updatechallenges|': readonly ['updatechallenges', ChallengesJSON];\n    /**\n     * `|queryresponse|QUERYTYPE|JSON`\n     *\n     * `JSON` is a JSON object representing containing the data that was requested with\n     * `/query QUERYTYPE` or `/query QUERYTYPE DETAILS`.\n     *\n     * Possible queries include `/query roomlist` and `/query userdetails USERNAME`.\n     */\n    '|queryresponse|': readonly ['queryresponse', QueryType, JSON];\n  }\n\n  export type GlobalArgName = keyof GlobalArgs;\n  export type GlobalArgType = GlobalArgs[GlobalArgName];\n\n  export interface MiscArgs {\n    '|unlink|': readonly ['unlink', Username] | readonly ['unlink', 'hide', Username];\n    '|raw|': readonly ['raw', HTML];\n    '|warning|': readonly ['warning', Message];\n    '|error|': readonly ['error', Message];\n    '|bigerror|': readonly ['bigerror', Message];\n    '|chatmsg|': readonly ['chatmsg', Message];\n    '|chatmsg-raw|': readonly ['chatmsg-raw', HTML];\n    '|controlshtml|': readonly ['controlshtml', HTML];\n    '|fieldhtml|': readonly ['fieldhtml', HTML];\n    '|debug|': readonly ['debug', Message];\n    '|deinit|': readonly ['deinit'];\n    '|pagehtml|': readonly ['pagehtml', HTML];\n    '|selectorhtml|': readonly ['selectorhtml', SelectorName, HTML];\n    '|refresh|': readonly ['refresh'];\n    '|tempnotify|':\n    | readonly ['tempnotify', TempNotifyName, Message]\n    | readonly ['tempnotify', TempNotifyName, Message, Message]\n    | readonly ['tempnotify', TempNotifyName, Message, Message, string];\n    '|tempnotifyoff|': readonly ['tempnotifyoff', TempNotifyName];\n    '|noinit|':\n    | readonly ['noinit', 'joinfailed' | 'namerequired' | 'nonexistent', Message]\n    | readonly ['noinit', 'rename', RoomID, RoomTitle];\n    '|hidelines|':\n    | readonly ['hidelines', 'delete' | 'hide', ID, Num]\n    | readonly ['hidelines', 'unlink', ID];\n    '|expire|': readonly ['expire'] | readonly ['expire', Message];\n    '|askreg|': readonly ['askreg', ID];\n  }\n\n  export interface TournamentArgs {\n    /**\n     * `|tournament|create|FORMAT|GENERATOR|PLAYERCAP`\n     *\n     * `FORMAT` is the name of the format in which each battle will be played. `GENERATOR` is either\n     * `Elimination` or `Round Robin` and describes the type of bracket that will be used.\n     * `Elimination` includes a prefix that denotes the number of times a player can lose before\n     * being eliminated (`Single`, `Double`, etc.). `Round Robin` includes the prefix `Double` if\n     * every matchup will battle twice. `PLAYERCAP` is a number representing the maximum amount of\n     * players that can join the tournament or `0` if no cap was specified.\n     */\n    '|tournament|create|': readonly ['tournament', 'create', Generator, '0' | Num];\n    /**\n     * `|tournament|update|JSON`\n     *\n     * `JSON` is a JSON object representing the changes in the tournament since the last update you\n     * received or the start of the tournament.\n     */\n    '|tournament|update|': readonly ['tournament', 'update', TournamentUpdateJSON];\n    /**\n     * `|tournament|updateEnd`\n     *\n     * Signals the end of an update period.\n     */\n    '|tournament|updateEnd|': readonly ['tournament', 'updateEnd'];\n    /**\n     * `|tournament|error|ERROR`\n     *\n     * An error of type `ERROR` occurred.\n     */\n    '|tournament|error|': readonly ['tournament', 'error', Message];\n    /**\n     * `|tournament|forceend`\n     *\n     * The tournament was forcibly ended.\n     */\n    '|tournament|forceend|': readonly ['tournament', 'forceend'];\n    /**\n     * `|tournament|join|USER`\n     *\n     * `USER` joined the tournament.\n     */\n    '|tournament|join|': readonly ['tournament', 'join', Username];\n    /**\n     * `|tournament|leave|USER`\n     *\n     * `USER` left the tournament.\n     */\n    '|tournament|leave|': readonly ['tournament', 'leave', Username];\n    /**\n     * `|tournament|replace|OLD|NEW`\n     *\n     * The player `OLD` has been replaced with `NEW`\n     */\n    '|tournament|replace|': readonly ['tournament', 'replace', Username, Username];\n    /**\n     * `|tournament|start|NUMPLAYERS`\n     *\n     * The tournament started with `NUMPLAYERS` participants.\n     */\n    '|tournament|start|': readonly ['tournament', 'start', Num];\n    /**\n     * `|tournament|disqualify|USER`\n     *\n     * `USER` was disqualified from the tournament.\n    */\n    '|tournament|disqualify|': readonly ['tournament', 'disqualify', Username];\n    /**\n     * `|tournament|battlestart|USER1|USER2|ROOMID`\n     *\n     * A tournament battle started between `USER1` and `USER2`, and the battle room has ID `ROOMID`.\n     */\n    '|tournament|battlestart|': readonly ['tournament', 'battlestart', Username, Username, RoomID];\n    /**\n     * `|tournament|battleend|USER1|USER2|RESULT|SCORE|RECORDED|ROOMID`\n     *\n     * The tournament battle between `USER1` and `USER2` in the battle room `ROOMID` ended. `RESULT`\n     * describes the outcome of the battle from `USER1`'s perspective (`win`, `loss`, or `draw`).\n     * `SCORE` is an array of length 2 that denotes the number of Pokemon `USER1` had left and the\n     * number of Pokemon `USER2` had left. `RECORDED` will be `fail` if the battle ended in a draw\n     * and the bracket type does not support draws. Otherwise, it will be `success`.\n     */\n    '|tournament|battleend|':\n    | readonly [\n      'tournament', 'battleend', Username, Username, 'win' | 'loss' | 'draw', Score, 'success',\n    ] | readonly ['tournament', 'battleend', Username, Username, 'draw', Score, 'fail'];\n    /**\n     * `|tournament|end|JSON`\n     *\n     * The tournament ended with details in `JSON`.\n     */\n    '|tournament|end|': readonly ['tournament', 'end', TournamentEndedJSON];\n    /**\n     * `|tournament|scouting|SETTING`\n     *\n     * Players are now either allowed or not allowed to join other tournament battles based on\n     * `SETTING` (`allow` or `disallow`).\n     */\n    '|tournament|scouting|': readonly ['tournament', 'scouting', 'allow' | 'disallow'];\n    /**\n     * `|tournament|autostart|on|TIMEOUT`\n     * `|tournament|autostart|off`\n     *\n     * If the third parameter is 'on': a timer was set for the tournament to auto-start in\n     * `TIMEOUT` seconds. If the third parameter is 'off': the timer for the tournament to\n     * auto-start was turned off.\n     */\n    '|tournament|autostart|':\n    | readonly ['tournament', 'autostart', 'on', Num]\n    | readonly ['tournament', 'autostart', 'off'];\n    /**\n     * `|tournament|autodq|on|TIMEOUT`\n     * `|tournament|autodq|off`\n     * `|tournament|autodq|target|TIME`\n     *\n     * If the third parameter is 'on': a timer was set for the tournament to auto-disqualify\n     * inactive players every `TIMEOUT` seconds. If the third parameter is 'off': the timer for the\n     * tournament to auto-disqualify inactive players was turned off. If the third parameter is\n     * 'target': you have `TIME` seconds to make or accept a challenge, or else you will be\n     * disqualified for inactivity.\n     */\n    '|tournament|autodq|':\n    | readonly ['tournament', 'autodq', 'on' | 'target', Num]\n    | readonly ['tournament', 'autodq', 'off'];\n  }\n\n  export type TournamentArgName = keyof TournamentArgs;\n  export type TournamentArgType = TournamentArgs[TournamentArgName];\n\n  export type MiscArgName = keyof MiscArgs;\n  export type MiscArgType = MiscArgs[MiscArgName];\n\n  export interface BattleInitArgs {\n    /**\n     * `|player|PLAYER|USERNAME|AVATAR|RATING`\n     *\n     *   - `PLAYER` is `p1` or `p2` (may also be `p3` or `p4` in 4 player battles)\n     *   - `USERNAME` is the username\n     *   - `AVATAR` is the player's avatar identifier\n     *   - `RATING` is the player's Elo rating in the format they're playing. This will only be\n     *     displayed in rated battles and when the player is first introduced otherwise it's blank.\n     */\n    '|player|':\n    | readonly ['player', Player]\n    | readonly ['player', Player, Username, AvatarIdent | '', Num | ''];\n    /**\n     * `|teamsize|PLAYER|NUMBER`\n     *\n     *   - `PLAYER` is `p1`, `p2`, `p3`, or `p4`\n     *   - `NUMBER` is the number of Pokémon your opponent starts with. In games without Team\n     *     Preview, you don't know which Pokémon your opponent has, but you at least know how many\n     *     there are.\n     */\n    '|teamsize|': readonly ['teamsize', Player, Num];\n    /**\n     * `|gametype|GAMETYPE`\n     *\n     * - `GAMETYPE` is `singles`, `doubles`, `triples`, `multi`, `free-for-all` or `rotation`.\n     */\n    '|gametype|': readonly ['gametype', GameType];\n    /**\n     * `|gen|GENNUM`\n     *\n     * Generation number, from 1 to 8. Stadium counts as its respective gens;,Let's Go counts as 7,\n     * and modded formats count as whatever gen they were based on.\n     */\n    '|gen|': readonly ['gen', GenerationNum];\n    /**\n     * `|tier|FORMATNAME`\n     *\n     * The name of the format being played.\n     */\n    '|tier|': readonly ['tier', FormatName];\n    /**\n     * `|rated`\n     * `|rated|MESSAGE`\n     *\n     * Will be sent if the game will affect the player's ladder rating (Elo score). `MESSAGE` will\n     * be included if the game is official in some other way, such as being a tournament game. Does\n     * not actually mean the game is rated.\n     */\n    '|rated|': readonly ['rated'] | readonly ['rated', Message];\n    '|seed|': readonly ['seed', Seed];\n    /**\n     * `|rule|RULE: DESCRIPTION`\n     *\n     * Will appear multiple times, one for each rule in effect.\n     */\n    '|rule|': readonly ['rule', Rule];\n    /**\n     * `|clearpoke`\n     *\n     * Marks the start of Team Preview\n     */\n    '|clearpoke|': readonly ['clearpoke'];\n    /**\n     * `|poke|PLAYER|DETAILS|ITEM`\n     *\n     * Declares a Pokémon for Team Preview.\n     *\n     *   - `PLAYER` is the player ID (see `|player|`)\n     *   - `DETAILS` describes the pokemon\n     *   - `ITEM` will be `item` if the Pokémon is holding an item, `mail` if the Pokémon is holding\n     *     mail in Gen 5 or blank otherwise\n     * Note that forme and shininess are hidden on this, unlike on the `|switch|`details message.\n     */\n    '|poke|': readonly ['poke', Player, PokemonDetails, 'item' | 'mail' | ''];\n    /**\n     * `|teampreview`\n     *\n     * Marks the end of Team Preview\n     */\n    '|teampreview|': readonly ['teampreview'] | ['teampreview', Num];\n    /**\n     * `|updatepoke|POKEMON|DETAILS`\n     *\n     * The specified Pokémon POKEMON's details are to revealed to be `DETAILS`.\n     */\n    '|updatepoke|': readonly ['updatepoke', PokemonIdent, PokemonDetails];\n    /**\n     * `|start`\n     *\n     * Indicates that the game has started.\n     */\n    '|start|': readonly ['start'];\n  }\n\n  export type BattleInitArgName = keyof BattleInitArgs;\n  export type BattleInitArgType = BattleInitArgs[BattleInitArgName];\n\n  export interface BattleProgressArgs {\n    /**\n     * `|`\n     *\n     * Clears the message-bar, and add a spacer to the battle history. This is usually done\n     * automatically by detecting the message-type, but can also be forced to happen with this.\n     */\n    '|done|': readonly ['done'];\n    /**\n     * `|request|REQUEST`\n     *\n     * Gives a JSON object containing a request for a choice (to move or switch). To assist in your\n     * decision, `REQUEST.active` has information about your active Pokémon, and `REQUEST.side` has\n     * information about your, your team as a whole. `REQUEST.rqid` is an optional request ID.\n     */\n    '|request|': readonly ['request', RequestJSON];\n\n    /**\n     * `|sentchoice|CHOICE`\n     *\n     * Conveys that `CHOICE` has already been received for the player and cannot be undone.\n     */\n    '|sentchoice|': readonly ['sentchoice', Choice];\n    /**\n     * `|inactive|MESSAGE`\n     *\n     * A message related to the battle timer has been sent. The official client displays these\n     * messages in red. `inactive` means that the timer is on at the time the message was sent.\n     */\n    '|inactive|': readonly ['inactive', Message];\n    /**\n     * `|inactiveoff|MESSAGE`\n     *\n     * A message related to the battle timer has been sent. The official client displays these\n     * messages in red. `inactiveoff` means that the timer is off.\n     */\n    '|inactiveoff|': readonly ['inactiveoff', Message];\n    /**\n     * `|upkeep`\n     *\n     * Signals the upkeep phase of the turn where the number of turns left for field\n     * conditions are updated.\n     */\n    '|upkeep|': readonly ['upkeep'];\n    /**\n     * `|turn|NUMBER`\n     *\n     * It is now turn `NUMBER`.\n     */\n    '|turn|': readonly ['turn', Num];\n    /**\n     * `|win|USER`\n     *\n     * `USER` has won the battle.\n     */\n    '|win|': readonly ['win', Username];\n    /**\n     * `|tie`\n     *\n     * The battle has ended in a tie.\n     */\n    '|tie|': readonly ['tie'];\n    /**\n     * `|t:|TIMESTAMP`\n     *\n     * The current UNIX timestamp (the number of seconds since 1970) - useful for determining\n     * when events occured in real time.\n     */\n    '|t:|': readonly ['t:', Timestamp];\n  }\n\n  export type BattleProgressArgName = keyof BattleProgressArgs;\n  export type BattleProgressArgType = BattleProgressArgs[BattleProgressArgName];\n\n  export interface BattleMajorArgs {\n    /**\n     * `|move|POKEMON|MOVE|TARGET`\n     *\n     * The specified Pokémon has used move `MOVE` at `TARGET`. If a move has multiple targets or\n     * no target, `TARGET` should be ignored. If a move targets a side, `TARGET` will be a (possibly\n     * fainted) Pokémon on that side.\n     */\n    '|move|':\n    | readonly ['move', PokemonIdent, MoveName]\n    | readonly ['move', PokemonIdent, MoveName | 'recharge', PokemonIdent | 'null' | ''];\n    /**\n     * `|switch|POKEMON|DETAILS|HP STATUS`\n     *\n     * A Pokémon identified by `POKEMON` has switched in (if there was an old Pokémon in that\n     * position, it is switched out).\n     *\n     * `POKEMON|DETAILS` represents all the information that can be used to tell Pokémon apart. If\n     * two pokemon have the same `POKEMON|DETAILS` (which will never happen in any format with\n     * Species Clause), you usually won't be able to tell if the same pokemon switched in or a\n     * different pokemon switched in.\n     *\n     * The switched Pokémon has HP `HP`, and status `STATUS`. `HP` is specified as a fraction; if it\n     * is your own Pokémon then it will be `CURRENT/MAX`, if not, it will be `/100` if HP Percentage\n     * Mod is in effect and `/48` otherwise. `STATUS` can be left blank, or it can be `slp`, `par`,\n     * etc.\n     */\n    '|switch|': readonly ['switch', PokemonIdent, PokemonDetails, PokemonHPStatus];\n    /**\n     * `|drag|POKEMON|DETAILS|HP STATUS`\n     *\n     * As `|switch|`, but `switch` means it was intentional, while `drag` means it was unintentional\n     * (forced by Whirlwind, Roar, etc).\n     */\n    '|drag|': readonly ['drag', PokemonIdent, PokemonDetails, PokemonHPStatus];\n    /**\n     * `|detailschange|POKEMON|DETAILS`\n     *\n     * The specified Pokémon has changed formes (via Mega Evolution, ability, etc.) to `DETAILS`. If\n     * the forme change is permanent (Mega Evolution or a Shaymin-Sky that is frozen), then\n     * `|detailschange|` will appear; otherwise, the client will send `|-formechange|`.\n     *\n     * Syntax is the same as `|switch|`.\n     */\n    '|detailschange|': readonly ['detailschange', PokemonIdent, PokemonDetails];\n    /**\n     * `|replace|POKEMON|DETAILS`\n     *\n     * Illusion has ended for the specified Pokémon. Syntax is the same as `|switch|`, but remember\n     * that everything you thought you knew about the previous Pokémon is now wrong.\n     *\n     * `POKEMON` will be the NEW Pokémon ID - i.e. it will have the nickname of the Zoroark (or\n     * other Illusion user).\n     */\n    '|replace|': readonly ['replace', PokemonIdent, PokemonDetails];\n    /**\n     * `|swap|POKEMON|POSITION`\n     *\n     * Moves already active `POKEMON` to active field `POSITION` where the leftmost position is 0\n     * and each position to the right counts up by 1.\n     */\n    '|swap|': readonly ['swap', PokemonIdent, Num] | readonly ['swap', PokemonIdent, PokemonIdent];\n    /**\n     * `|cant|POKEMON|REASON` or `|cant|POKEMON|REASON|MOVE`\n     *\n     * The Pokémon `POKEMON` could not perform a move because of the indicated `REASON` (such as\n     * paralysis, Disable, etc). Sometimes, the move it was trying to use is given.\n     */\n    '|cant|':\n    | readonly ['cant', PokemonIdent, Reason | AbilityName | EffectName | MoveName]\n    | readonly [\n      'cant', PokemonIdent, Reason | AbilityName | EffectName | MoveName, EffectName | MoveName,\n    ];\n    /**\n     * `|faint|POKEMON`\n     *\n     * The Pokémon `POKEMON` has fainted.\n     */\n    '|faint|': readonly ['faint', PokemonIdent];\n    '|message|': readonly ['message', Message];\n  }\n\n  export type BattleMajorArgName = keyof BattleMajorArgs;\n  export type BattleMajorArgType = BattleMajorArgs[BattleMajorArgName];\n\n  export interface BattleMinorArgs {\n    /**\n     * `|-formechange|POKEMON|SPECIES`\n     *\n     * The specified Pokémon has changed formes (via Mega Evolution, ability, etc.) to `SPECIES`. If\n     * the forme change is permanent (Mega Evolution or a Shaymin-Sky that is frozen), then\n     * `|detailschange|` will appear; otherwise, the client will send `|-formechange|`.\n     *\n     * Syntax is the same as `|switch|`, though with `SPECIES` in lieu of `DETAILS`.\n     */\n    '|-formechange|':\n    | readonly ['-formechange', PokemonIdent, SpeciesName]\n    | readonly ['-formechange', PokemonIdent, SpeciesName, ''];\n    /**\n     * `|-fail|POKEMON|ACTION`\n     *\n     * The specified `ACTION` has failed against the `POKEMON` targetted. The `ACTION` in question\n     * should be a move that fails due to its own mechanics. Moves (or effect activations) that fail\n     * because they're blocked by another effect should use `-block` instead.\n     */\n    '|-fail|':\n    | readonly ['-fail', PokemonIdent]\n    | readonly ['-fail', PokemonIdent, EffectName | MoveName | StatusName]\n    | readonly ['-fail', PokemonIdent, 'unboost', StatDisplayName | BoostID];\n    /**\n     * `|-block|POKEMON|EFFECT|MOVE|ATTACKER`\n     *\n     * An effect targeted at `POKEMON` was blocked by `EFFECT`. This may optionally specify that the\n     * effect was a `MOVE` from `ATTACKER`. `[of]SOURCE` will note the owner of the `EFFECT`, in the\n     * case that it's not `EFFECT` (for instance, an ally with Aroma Veil.)\n     */\n    '|-block|':\n    | readonly ['-block', PokemonIdent, EffectName]\n    | readonly ['-block', PokemonIdent, EffectName | MoveName, MoveName | '']\n    | readonly ['-block', PokemonIdent, EffectName, MoveName, PokemonIdent | ''];\n    /**\n     * `|-notarget|POKEMON`\n     *\n     * A move has failed due to their being no target Pokémon `POKEMON`. `POKEMON` is not present\n     * in Generation 1. This action is specific to Generations 1-4 as in later Generations a failed\n     * move will display using `-fail`.\n     */\n    '|-notarget|': readonly ['-notarget', PokemonIdent] | readonly ['-notarget'];\n    /**\n     * |-miss|SOURCE|TARGET`\n     *\n     * The move used by the `SOURCE` Pokémon missed (maybe absent) the `TARGET` Pokémon.\n     */\n    '|-miss|': readonly ['-miss', PokemonIdent, PokemonIdent] | readonly ['-miss', PokemonIdent];\n    /**\n     * `|-damage|POKEMON|HP STATUS`\n     *\n     * The specified Pokémon `POKEMON` has taken damage, and is now at `HP STATUS` (see `|switch|`\n     * for details).\n     *\n     * If `HP` is 0, `STATUS` should be ignored. The current behavior is for `STATUS` to be `fnt`,\n     * but this may change and should not be relied upon.\n     */\n    '|-damage|': readonly ['-damage', PokemonIdent, PokemonHPStatus];\n    /**\n     * `|-heal|POKEMON|HP STATUS`\n     *\n     * Same as `-damage`, but the Pokémon has healed damage instead.\n     */\n    '|-heal|': readonly ['-heal', PokemonIdent, PokemonHPStatus];\n    /**\n     * `|-sethp|POKEMON|HP`\n     *\n     * The specified Pokémon `POKEMON` now has `HP` hit points.\n     */\n    '|-sethp|':\n    | readonly ['-sethp', PokemonIdent, PokemonHPStatus]\n    | readonly ['-sethp', PokemonIdent, Num, PokemonIdent, Num];\n    /**\n     * `|-status|POKEMON|STATUS`\n     *\n     * The Pokémon `POKEMON` has been inflicted with `STATUS`.\n     */\n    '|-status|': readonly ['-status', PokemonIdent, StatusName];\n    /**\n     * `|-curestatus|POKEMON|STATUS`\n     *\n     * The Pokémon `POKEMON` has recovered from `STATUS`.\n     */\n    '|-curestatus|': readonly ['-curestatus', PokemonIdent, StatusName];\n    /**\n     * `|-cureteam|POKEMON`\n     *\n     * The Pokémon `POKEMON` has used a move that cures its team of status effects, like Heal Bell.\n     */\n    '|-cureteam|': readonly ['-cureteam', PokemonIdent];\n    /**\n     * `|-boost|POKEMON|BOOST|AMOUNT`\n     *\n     * The specified Pokémon `POKEMON` has gained `AMOUNT` in `BOOST`, using the standard rules for\n     * Pokémon boosts in-battle.\n     */\n    '|-boost|': readonly ['-boost', PokemonIdent, BoostID, Num];\n    /**\n     * `|-unboost|POKEMON|BOOST|AMOUNT`\n     *\n     * Same as `-boost`, but for negative boosts instead.\n     */\n    '|-unboost|': readonly ['-unboost', PokemonIdent, BoostID, Num];\n    /**\n     * `|-setboost|POKEMON|BOOST|AMOUNT`\n     *\n     * Same as `-boost` and `-unboost`, but `BOOST` is *set* to `AMOUNT` instead of  boosted *by*\n     * `AMOUNT`. (For example: Anger Point, Belly Drum)\n     */\n    '|-setboost|': readonly ['-setboost', PokemonIdent, BoostID, Num];\n    /**\n     * `|-swapboost|SOURCE|TARGET|BOOSTS`\n     *\n     * Swaps the boosts from `BOOSTS` between the `SOURCE` Pokémon and `TARGET` Pokémon. (For\n     * example: Guard Swap, Heart Swap).\n     */\n    '|-swapboost|':\n    | readonly ['-swapboost', PokemonIdent, PokemonIdent]\n    | readonly ['-swapboost', PokemonIdent, PokemonIdent, BoostIDs];\n    /**\n     * `|-invertboost|POKEMON`\n     *\n     * Invert the boosts of the target Pokémon `POKEMON`. (For example: Topsy-Turvy).\n     */\n    '|-invertboost|': readonly ['-invertboost', PokemonIdent];\n    /**\n     * `|-clearboost|POKEMON`\n     *\n     * Clears all of the boosts of the target `POKEMON`. (For example: Clear Smog).\n     */\n    '|-clearboost|': readonly ['-clearboost', PokemonIdent];\n    /**\n     * `|-clearallboost`\n     *\n     * Clears all boosts from all Pokémon on both sides. (For example: Haze).\n     */\n    '|-clearallboost|': readonly ['-clearallboost'];\n    /**\n     * `|-clearpositiveboost|TARGET|POKEMON|EFFECT`\n     *\n     * Clear the positive boosts from the `TARGET` Pokémon due to an `EFFECT` of the `POKEMON`\n     * Pokémon. (For example: 'move: Spectral Thief').\n     */\n    '|-clearpositiveboost|':\n    readonly ['-clearpositiveboost', PokemonIdent, PokemonIdent, EffectName];\n    /**\n     * `|-clearnegativeboost|POKEMON`\n     *\n     * Clear the negative boosts from the target Pokémon `POKEMON`. (For example: usually as the\n     * result of a `[zeffect]`).\n     */\n    '|-clearnegativeboost|': readonly ['-clearnegativeboost', PokemonIdent];\n    /**\n     * `|-copyboost|SOURCE|TARGET`\n     *\n     * Copy the boosts from `SOURCE` Pokémon to `TARGET` Pokémon (For example: Psych Up).\n     */\n    '|-copyboost|':\n    | readonly ['-copyboost', PokemonIdent, PokemonIdent]\n    | readonly ['-copyboost', PokemonIdent, PokemonIdent, BoostIDs];\n    /**\n     * `|-weather|WEATHER`\n     *\n     * Indicates the weather that is currently in effect. If `|[upkeep]` is present, it means that\n     * `WEATHER` was active previously and is still in effect that turn. Otherwise, it means that\n     * the weather has changed due to a move or ability, or has expired, in which case `WEATHER`\n     * will be `none`.\n     */\n    '|-weather|': readonly ['-weather', Weather | 'none'];\n    /**\n     * `|-fieldstart|CONDITION`\n     *\n     * The field condition `CONDITION` has started. Field conditions are all effects that affect the\n     * entire field and aren't a weather. (For example: Trick Room, Grassy Terrain).\n     */\n    '|-fieldstart|': readonly ['-fieldstart', MoveEffectName | FieldCondition];\n    /**\n     * `|-fieldend|CONDITION`\n     *\n     * Indicates that the field condition `CONDITION` has ended.\n     */\n    '|-fieldend|': readonly ['-fieldend', MoveEffectName | FieldCondition];\n    /**\n     * `|-sidestart|SIDE|CONDITION`\n     *\n     * A side condition `CONDITION` has started on `SIDE`. Side conditions are all effects that\n     * affect one side of the field. (For example: Tailwind, Stealth Rock, Reflect).\n     */\n    '|-sidestart|': readonly ['-sidestart', Side, MoveEffectName | SideCondition];\n    /**\n     * `|-sideend|SIDE|CONDITION`\n     *\n     * Indicates that the side condition `CONDITION` ended for the given `SIDE`.\n     */\n    '|-sideend|': readonly ['-sideend', Side, MoveEffectName | SideCondition];\n    /**\n     * `|-swapsideconditions`\n     *\n     * Swaps side conditions between sides. Used for Court Change.\n     */\n    '|-swapsideconditions|': readonly ['-swapsideconditions'];\n    /**\n     * `|-start|POKEMON|EFFECT`\n     *\n     * A [*volatile* status](\n     * https://bulbapedia.bulbagarden.net/wiki/Status_condition#Volatile_status) has been inflicted\n     * on the `POKEMON` Pokémon by `EFFECT`. (For example: confusion, Taunt, Substitute).\n     */\n    '|-start|':\n    | readonly ['-start', PokemonIdent, 'Dynamax']\n    | readonly ['-start', PokemonIdent, 'Dynamax', 'Gmax' | '']\n    | readonly ['-start', PokemonIdent, EffectName | MoveName]\n    | readonly ['-start', PokemonIdent, EffectName, MoveName]\n    | readonly ['-start', PokemonIdent, 'typechange', Types?]\n    | readonly ['-start', PokemonIdent, 'typeadd', TypeName];\n    /**\n     * `|-end|POKEMON|EFFECT`\n     *\n     * The volatile status from `EFFECT` inflicted on the `POKEMON` Pokémon has ended.\n     */\n    '|-end|': readonly ['-end', PokemonIdent, EffectName | MoveName | AbilityName];\n    /**\n     * `|-crit|POKEMON`\n     *\n     * A move has dealt a critical hit against the `POKEMON`.\n     */\n    '|-crit|': readonly ['-crit', PokemonIdent];\n    /**\n     * `|-supereffective|POKEMON`\n     *\n     * A move was super effective against the `POKEMON`.\n     */\n    '|-supereffective|': readonly ['-supereffective', PokemonIdent];\n    /**\n     * `|-resisted|POKEMON`\n     *\n     * A move was not very effective against the `POKEMON`.\n     */\n    '|-resisted|': readonly ['-resisted', PokemonIdent];\n    /**\n     * `|-immune|POKEMON`\n     *\n     * The `POKEMON` was immune to a move.\n     */\n    '|-immune|':\n    | readonly ['-immune', PokemonIdent]\n    | readonly ['-immune', PokemonIdent, 'confusion'];\n    /**\n     * `|-item|POKEMON|ITEM|[from]EFFECT`\n     *\n     * The `ITEM` held by the `POKEMON` has been changed or revealed due to a move or ability\n     * `EFFECT`.\n     *\n     * `|-item|POKEMON|ITEM`\n     *\n     * `POKEMON` has just switched in, and its item `ITEM` is being announced to have a long-term\n     * effect (will not use `[from]`). Air Balloon is the only current user of this.\n     */\n    '|-item|': readonly ['-item', PokemonIdent, ItemName];\n    /**\n     * `|-enditem|POKEMON|ITEM|[from]EFFECT`\n     *\n     * The `ITEM` held by `POKEMON` has been destroyed by a move or ability (like Knock Off), and it\n     * now holds no item.\n     *\n     * This will be silent `[silent]` if the item's ownership was changed (with a move or ability\n     * like Thief or Trick), even if the move or ability would result in a Pokémon without an item.\n     *\n     * `|-enditem|POKEMON|ITEM`\n     *\n     * `POKEMON`'s `ITEM` has destroyed itself (consumed Berries, Air Balloon). If a berry is\n     * consumed, it also has an additional modifier `|[eat]` to indicate that it was consumed.\n     *\n     * Sticky Barb does not announce itself with this or any other message when it changes hands.\n     */\n    '|-enditem|': readonly ['-enditem', PokemonIdent, ItemName];\n    /**\n     * `|-ability|POKEMON|ABILITY|[from]EFFECT`\n     *\n     * The `ABILITY` of the `POKEMON` has been changed due to a move/ability `EFFECT`.\n     *\n     * Note that Skill Swap does not send this message despite it changing abilities, because it\n     * does not reveal abilities when used between allies in a Double or Triple Battle.\n     *\n     * `|-ability|POKEMON|ABILITY`\n     *\n     * `POKEMON` has just switched-in, and its ability `ABILITY` is being announced to have a\n     * long-term effect (will not use `[from]`).\n     *\n     * Effects that start at switch-in include Mold Breaker and Neutralizing Gas. It does not\n     * include abilities that activate once and don't have any long-term effects, like Intimidate\n     * (Intimidate should use `-activate`).\n     */\n    '|-ability|':\n    | readonly ['-ability', PokemonIdent, AbilityName]\n    | readonly ['-ability', PokemonIdent, AbilityName, Side | PokemonIdent | 'boost']\n    | readonly ['-ability', PokemonIdent, AbilityName, AbilityName, PokemonIdent];\n    /**\n     * `|-endability|POKEMON`\n     *\n     * The `POKEMON` has had its ability suppressed by Gastro Acid.\n     */\n    '|-endability|':\n    | readonly ['-endability', PokemonIdent]\n    | readonly ['-endability', PokemonIdent, AbilityName | 'none'];\n    /**\n     * `|-transform|POKEMON|TARGET`\n     *\n     * The Pokémon `POKEMON` has transformed into `TARGET` by the move Transform or the ability\n     * Imposter.\n     */\n    '|-transform|': readonly ['-transform', PokemonIdent, PokemonIdent];\n    /**\n     * `|-mega|POKEMON|MEGASTONE`\n     *\n     * The Pokémon `POKEMON` used `MEGASTONE` to Mega Evolve.\n     */\n    '|-mega|': readonly ['-mega', PokemonIdent, SpeciesName, ItemName | ''];\n    /**\n     * `|-primal|POKEMON|ITEM`\n     *\n     * The Pokémon `POKEMON` has reverted to its primal forme via `ITEM`.\n     */\n    '|-primal|': readonly ['-primal', PokemonIdent, ItemName];\n    /**\n     * `|-burst|POKEMON|SPECIES|ITEM`\n     *\n     * The Pokémon `POKEMON` has used `ITEM` to Ultra Burst into `SPECIES`.\n     */\n    '|-burst|': readonly ['-burst', PokemonIdent, SpeciesName, ItemName];\n    /**\n     * `|-zpower|POKEMON`\n     *\n     * The Pokémon `POKEMON` has used the z-move version of its move.\n     */\n    '|-zpower|': readonly ['-zpower', PokemonIdent];\n    /**\n     * `|-zbroken|POKEMON`\n     *\n     * A z-move has broken through protect and hit the `POKEMON`.\n     */\n    '|-zbroken|': readonly ['-zbroken', PokemonIdent];\n    /**\n     * `|-activate|EFFECT`\n     *\n     * A miscellaneous effect has activated. This is triggered whenever an effect could not be\n     * better described by one of the other minor messages: for example, healing abilities like\n     * Water Absorb simply use `-heal`.\n     *\n     * Items usually activate with `-end`, although items with two messages, like Berries (\"POKEMON\n     * ate the Leppa Berry! POKEMON restored PP...!\"), will send the \"ate\" message as `-eat`, and\n     * the \"restored\" message as `-activate`.\n     */\n    '|-activate|':\n    | readonly ['-activate', PokemonIdent | '', EffectName]\n    | readonly [\n      '-activate',\n      PokemonIdent,\n      EffectName | AbilityName | MoveName | '',\n      ItemName | MoveName | AbilityName | Num | PokemonIdent | '',\n    ]\n    | readonly ['-activate', PokemonIdent, EffectName, AbilityName | '', AbilityName | ''];\n    '|-fieldactivate|': readonly ['-fieldactivate', EffectName];\n    /**\n     * `|-hint|MESSAGE`\n     *\n     * Displays a message in parentheses to the client. Hint messages appear to explain and clarify\n     * why certain actions, such as Fake Out and Mat Block failing, have occurred, when there would\n     * normally be no in-game messages.\n     */\n    '|-hint|': readonly ['-hint', Message];\n    /**\n     * `|-center`\n     *\n     * Appears in Triple Battles when only one Pokémon remains on each side, to indicate that the\n     * Pokémon have been automatically centered.\n     */\n    '|-center|': readonly ['-center'];\n    /**\n     * `|-message|MESSAGE`\n     *\n     * Displays a miscellaneous message to the client. These messages are primarily used for\n     * messages from game mods that aren't supported by the client, like rule clauses such as Sleep\n     * Clause, or other metagames with custom messages for specific scenarios.\n     */\n    '|-message|': readonly ['-message', Message];\n    /**\n     * `|-combine`\n     *\n     * A move has been combined with another (For example: Fire Pledge).\n     */\n    '|-combine|': readonly ['-combine'];\n    /**\n     * `|-waiting|SOURCE|TARGET`\n     *\n     * The `SOURCE` Pokémon has used a move and is waiting for the `TARGET` Pokémon (For example:\n     * Fire Pledge).\n     */\n    '|-waiting|': readonly ['-waiting', PokemonIdent, PokemonIdent];\n    /**\n     * `|-prepare|ATTACKER|MOVE|DEFENDER`\n     *\n     * The `ATTACKER` Pokémon is preparing to use a charge `MOVE` on the `DEFENDER` (For example:\n     * Dig, Fly).\n     */\n    '|-prepare|':\n    | readonly ['-prepare', PokemonIdent, MoveName]\n    | readonly ['-prepare', PokemonIdent, MoveName, PokemonIdent];\n    /**\n     * `|-mustrecharge|POKEMON`\n     *\n     * The Pokémon `POKEMON` must spend the turn recharging from a previous move.\n     */\n    '|-mustrecharge|': readonly ['-mustrecharge', PokemonIdent];\n    /**\n     * `|-hitcount|POKEMON|NUM`\n     *\n     * A multi-hit move hit the `POKEMON` `NUM` times.\n     */\n    '|-hitcount|': readonly ['-hitcount', PokemonIdent, Num];\n    /**\n     * `|-singlemove|POKEMON|MOVE`\n     *\n     * The Pokémon `POKEMON` used move `MOVE` which causes a temporary effect lasting the duration\n     * of the move. (For example: Grudge, Destiny Bond).\n     */\n    '|-singlemove|': readonly ['-singlemove', PokemonIdent, MoveName];\n    /**\n     * `|-singleturn|POKEMON|MOVE`\n     *\n     * The Pokémon `POKEMON` used move `MOVE` which causes a temporary effect lasting the duration\n     * of the turn. (For example: Protect, Focus Punch, Roost).\n     */\n    '|-singleturn|': readonly ['-singleturn', PokemonIdent, MoveEffectName | MoveName];\n    '|-anim|': readonly ['-anim', PokemonIdent, AnimationName, PokemonIdent];\n    '|-ohko|': readonly ['-ohko'];\n    '|-candynamax|': readonly ['-candynamax', Player];\n    '|-terastallize|': readonly ['-terastallize', PokemonIdent, TypeName];\n  }\n\n  export type BattleMinorArgName = keyof BattleMinorArgs;\n  export type BattleMinorArgType = BattleMinorArgs[BattleMinorArgName];\n\n  export type BattleArgs =\n    BattleInitArgs &\n    BattleProgressArgs &\n    BattleMajorArgs &\n    BattleMinorArgs;\n  export type BattleArgName =\n    | BattleInitArgName\n    | BattleProgressArgName\n    | BattleMajorArgName\n    | BattleMinorArgName;\n  export type BattleArgType = BattleArgs[BattleArgName];\n\n  export type BattleArgsKWArgsTypes = {\n    'ability': AbilityName;\n    'ability2': AbilityName;\n    /**\n     * `[anim] MOVE2`\n     *\n     * Use the animation of `MOVE2` instead.\n     */\n    'anim': MoveName;\n    'block': MoveName;\n    'broken': true;\n    'consumed': true;\n    'damage': true;\n    'eat': true;\n    'fail': true;\n    'fatigue': true;\n    'forme': true;\n    /** `[from] EFFECT` */\n    'from': EffectName | MoveName | AbilityName;\n    'fromitem': true;\n    'heavy': true;\n    'item': ItemName;\n    /**\n     * `[miss]`\n     *\n     * The move missed.\n     */\n    'miss': true;\n    'move': MoveName | ID;\n    'msg': true;\n    'name': Nickname;\n    'notarget': true;\n    'number': Num;\n    /** `[of] SOURCE` */\n    'of': PokemonIdent | '';\n    'ohko': true;\n    'persistent': true;\n    /**\n     * `[silent]`\n     *\n     * Suppress message.\n     */\n    'silent': true;\n    'source': true;\n    'spread': Slots | true;\n    /**\n     * `[still]`\n     *\n     * Suppress animation.\n     */\n    'still': true;\n    'thaw': true;\n    'upkeep': true;\n    'weak': true;\n    'weaken': true;\n    'wisher': Nickname;\n    'zeffect': true;\n  } & {\n    'already': true;\n    'anim': AnimationName | 'prepare';\n    'identify': true;\n    'interrupt': true;\n    'multiple': true;\n    'partiallytrapped': true;\n    'prepare': true;\n  };\n\n  export type GeneralKWArgNames = 'from' | 'of' | 'still' | 'silent';\n\n  export interface BattleArgsWithKWArgs {\n    '|cant|': GeneralKWArgNames;\n    '|move|': GeneralKWArgNames | 'anim' | 'miss' | 'notarget' | 'prepare' | 'spread' | 'zeffect';\n    '|swap|': GeneralKWArgNames;\n    '|switch|': GeneralKWArgNames;\n    '|-activate|': GeneralKWArgNames\n    | 'ability' | 'ability2' | 'block' | 'broken' | 'damage' | 'item'\n    | 'move' | 'number' | 'consumed' | 'name' | 'fromitem' | 'source';\n    '|-ability|': GeneralKWArgNames | 'move' | 'weaken' | 'fail';\n    '|-block|': GeneralKWArgNames;\n    '|-boost|': GeneralKWArgNames | 'multiple' | 'zeffect';\n    '|-copyboost|': GeneralKWArgNames | 'zeffect';\n    '|-clearboost|': GeneralKWArgNames;\n    '|-clearallboost|': GeneralKWArgNames | 'zeffect';\n    '|-clearnegativeboost|': GeneralKWArgNames | 'zeffect';\n    '|-curestatus|': GeneralKWArgNames | 'thaw' | 'msg';\n    '|-cureteam|': GeneralKWArgNames;\n    '|-damage|': GeneralKWArgNames | 'partiallytrapped';\n    '|-end|': GeneralKWArgNames | 'partiallytrapped' | 'interrupt';\n    '|-endability|': GeneralKWArgNames;\n    '|-enditem|': GeneralKWArgNames | 'eat' | 'move' | 'weaken';\n    '|-fail|': GeneralKWArgNames | 'forme' | 'heavy' | 'msg' | 'weak' | 'fail' | 'block';\n    '|-fieldstart|': GeneralKWArgNames | 'persistent';\n    '|-fieldend|': GeneralKWArgNames;\n    '|-formechange|': GeneralKWArgNames | 'msg';\n    '|-heal|': GeneralKWArgNames | 'wisher' | 'zeffect';\n    '|-immune|': GeneralKWArgNames | 'ohko';\n    '|-invertboost|': GeneralKWArgNames;\n    '|-item|': GeneralKWArgNames | 'identify';\n    '|-miss|': GeneralKWArgNames; // FIXME\n    '|-setboost|': GeneralKWArgNames;\n    '|-sethp|': GeneralKWArgNames;\n    '|-sidestart|': 'silent' | 'persistent';\n    '|-sideend|': GeneralKWArgNames;\n    '|-singlemove|': GeneralKWArgNames | 'zeffect';\n    '|-singleturn|': GeneralKWArgNames | 'zeffect';\n    '|-start|': GeneralKWArgNames\n    | 'already' | 'damage' | 'block' | 'fatigue' | 'upkeep' | 'zeffect';\n    '|-status|': GeneralKWArgNames;\n    '|-swapboost|': GeneralKWArgNames;\n    '|-transform|': GeneralKWArgNames | 'msg';\n    '|-unboost|': GeneralKWArgNames | 'multiple' | 'zeffect';\n    '|-weather|': GeneralKWArgNames | 'upkeep';\n    '|-anim|': 'spread' | 'miss' | 'notarget';\n  }\n\n  export type BattleArgsWithKWArgName = keyof BattleArgsWithKWArgs;\n  export type BattleArgsWithKWArgType = BattleArgsWithKWArgs[BattleArgsWithKWArgName];\n\n  export type BattleArgKWArgs<T extends BattleArgName> =\n    Readonly< T extends BattleArgsWithKWArgName\n      ? {[K in BattleArgsWithKWArgs[T]]?: BattleArgsKWArgsTypes[K] | undefined}\n      : {}>; // eslint-disable-line @typescript-eslint/ban-types\n\n  export type BattleArgsKWArgs = {[T in BattleArgName]: BattleArgKWArgs<T>};\n  export type BattleArgsKWArgName = BattleArgName;\n  export type BattleArgsKWArgType = BattleArgsKWArgs[Protocol.BattleArgsWithKWArgName];\n\n  export type Args = Readonly<\n  RoomArgs &\n  GlobalArgs &\n  TournamentArgs &\n  MiscArgs &\n  BattleArgs>;\n  export type ArgName =\n    | RoomArgName\n    | GlobalArgName\n    | TournamentArgName\n    | MiscArgName\n    | BattleArgName;\n\n  export type ArgType = Args[ArgName];\n\n  export type KWArgs = BattleArgsKWArgs;\n  export type KWArgType = BattleArgsKWArgType;\n\n  export type ArgsWithKWArgName = BattleArgsWithKWArgName;\n  export type ArgsWithKWArgType = BattleArgsKWArgType;\n\n  export type Handler<T = void | Promise<void>> = {\n    [key in Exclude<ArgName, ArgsWithKWArgName>]?: (m: Args[key]) => T;\n  } & {\n    [key in ArgsWithKWArgName]?: (a: Args[key], k: KWArgs[key]) => T;\n  };\n}\n\nexport type PositionLetter = Protocol.PositionLetter;\n\nexport type PokemonIdent = Protocol.PokemonIdent;\nexport type PokemonSearchID = Protocol.PokemonSearchID;\nexport type PokemonDetails = Protocol.PokemonDetails;\nexport type PokemonHPStatus = Protocol.PokemonHPStatus;\n\nexport type Username = Protocol.Username;\nexport type AvatarIdent = Protocol.AvatarIdent;\n\nexport type EffectName = Protocol.EffectName;\nexport type SpeciesName = Protocol.SpeciesName;\nexport type AbilityName = Protocol.AbilityName;\nexport type ItemName = Protocol.ItemName;\nexport type MoveName = Protocol.MoveName;\n\nexport type Message = Protocol.Message;\nexport type Timestamp = Protocol.Timestamp;\n\nexport type NotificationTitle = Protocol.NotificationTitle;\nexport type HighlightToken = Protocol.HighlightToken;\nexport type TempNotifyName = Protocol.TempNotifyName;\n\nexport type HTML = Protocol.HTML;\nexport type UHTMLName = Protocol.UHTMLName;\nexport type SelectorName = Protocol.SelectorName;\nexport type JSON = Protocol.JSON;\n\nexport type RoomID = Protocol.RoomID;\nexport type RoomTitle = Protocol.RoomTitle;\nexport type UserList = Protocol.UserList;\n\nexport type Num = Protocol.Num;\nexport type FormatsList = Protocol.FormatsList;\nexport type Score = Protocol.Score;\nexport type Generator = Protocol.Generator;\nexport type FormatName = Protocol.FormatName;\nexport type Rule = Protocol.Rule;\nexport type BoostIDs = Protocol.BoostIDs;\nexport type Seed = Protocol.Seed;\nexport type Slots = Protocol.Slots;\nexport type Types = Protocol.Types;\nexport type Nickname = Protocol.Nickname;\nexport type StatDisplayName = Protocol.StatDisplayName;\n\nexport type Reason = Protocol.Reason;\nexport type QueryType = Protocol.QueryType;\n\nexport type ChallengesJSON = Protocol.ChallengesJSON;\nexport type SearchStateJSON = Protocol.SearchStateJSON;\nexport type TournamentUpdateJSON = Protocol.TournamentUpdateJSON;\nexport type TournamentEndedJSON = Protocol.TournamentEndedJSON;\nexport type RequestJSON = Protocol.RequestJSON;\n\nexport type Challenges = Protocol.Challenges;\nexport type SearchState = Protocol.SearchState;\nexport type TournamentUpdate = Protocol.TournamentUpdate;\nexport type TournamentEnded = Protocol.TournamentEnded;\n\nexport type Request = Protocol.Request;\nexport namespace Request {\n  export type ActivePokemon = Protocol.Request.ActivePokemon;\n  export type Pokemon = Protocol.Request.Pokemon;\n}\n\nexport type RoomInitArgs = Protocol.RoomInitArgs;\nexport type RoomInitArgName = Protocol.RoomInitArgName;\nexport type RoomInitArgType = Protocol.RoomInitArgType;\n\nexport type RoomMessageArgs = Protocol.RoomMessageArgs;\nexport type RoomMessageArgName = Protocol.RoomMessageArgName;\nexport type RoomMessageArgType = Protocol.RoomMessageArgType;\n\nexport type RoomArgs = Protocol.RoomArgs;\nexport type RoomArgName = Protocol.RoomArgName;\nexport type RoomArgsType = Protocol.RoomArgsType;\n\nexport type GlobalArgs = Protocol.GlobalArgs;\nexport type GlobalArgName = Protocol.GlobalArgName;\nexport type GlobalArgType = Protocol.GlobalArgType;\n\nexport type MiscArgs = Protocol.MiscArgs;\nexport type MiscArgName = Protocol.MiscArgName;\nexport type MiscArgType = Protocol.MiscArgType;\n\nexport type TournamentArgs = Protocol.TournamentArgs;\nexport type TournamentArgName = Protocol.TournamentArgName;\nexport type TournamentArgType = Protocol.TournamentArgType;\n\nexport type BattleInitArgs = Protocol.BattleInitArgs;\nexport type BattleInitArgName = Protocol.BattleInitArgName;\nexport type BattleInitArgType = Protocol.BattleInitArgType;\n\nexport type BattleProgressArgs = Protocol.BattleProgressArgs;\nexport type BattleProgressArgName = Protocol.BattleProgressArgName;\nexport type BattleProgressArgType = Protocol.BattleProgressArgType;\n\nexport type BattleMajorArgs = Protocol.BattleMajorArgs;\nexport type BattleMajorArgName = Protocol.BattleMajorArgName;\nexport type BattleMajorArgType = Protocol.BattleMajorArgType;\n\nexport type BattleMinorArgs = Protocol.BattleMinorArgs;\nexport type BattleMinorArgName = Protocol.BattleMinorArgName;\nexport type BattleMinorArgType = Protocol.BattleMinorArgType;\n\nexport type BattleArgs = Protocol.BattleArgs;\nexport type BattleArgName = Protocol.BattleArgName;\nexport type BattleArgType = Protocol.BattleArgType;\n\nexport type BattleArgsKWArgsTypes = Protocol.BattleArgsKWArgsTypes;\nexport type BattleArgsWithKWArgs = Protocol.BattleArgsWithKWArgs;\n\nexport type BattleArgsWithKWArgName = Protocol.BattleArgsWithKWArgName;\nexport type BattleArgsWithKWArgType = Protocol.BattleArgsWithKWArgType;\n\nexport type BattleArgKWArgs<T extends BattleArgName> = Protocol.BattleArgKWArgs<T>;\n\nexport type BattleArgsKWArgs = Protocol.BattleArgsKWArgs;\nexport type BattleArgsKWArgName = Protocol.BattleArgsKWArgName;\nexport type BattleArgsKWArgType = Protocol.BattleArgsKWArgType;\n\nexport type Args = Protocol.Args;\nexport type ArgName = Protocol.ArgName;\nexport type ArgType = Protocol.ArgType;\n\nexport type KWArgs = Protocol.KWArgs;\nexport type KWArgType = Protocol.KWArgType;\nexport type ArgsWithKWArgName = Protocol.ArgsWithKWArgName;\nexport type ArgsWithKWArgType = Protocol.ArgsWithKWArgType;\n\nexport type Handler<T> = Protocol.Handler<T>;\n\nexport interface PokemonHealth {\n  hp: number;\n  maxhp: number;\n  hpcolor: HPColor | '';\n  status?: StatusName;\n  fainted?: boolean;\n}\n\nexport interface DetailedPokemon {\n  details: PokemonDetails;\n  name: string;\n  speciesForme: string;\n  level: number;\n  shiny: boolean;\n  gender?: GenderName;\n  ident: PokemonIdent;\n  terastallized?: TypeName;\n  searchid: PokemonSearchID;\n}\n\nfunction toID(s: string): ID {\n  return ('' + s).toLowerCase().replace(/[^a-z0-9]+/g, '') as ID;\n}\n\nexport const Protocol = new class {\n  // NOTE: An object is used here to get TypeScript to perform exhaustiveness checking\n  ARGS: {[k in Protocol.ArgName]: 1} = {\n    '|init|': 1, '|title|': 1, '|users|': 1, '||': 1, '|html|': 1, '|uhtml|': 1, '|pagehtml|': 1,\n    '|uhtmlchange|': 1, '|join|': 1, '|leave|': 1, '|name|': 1, '|chat|': 1, '|notify|': 1,\n    '|:|': 1, '|c:|': 1, '|t:|': 1, '|battle|': 1, '|popup|': 1, '|pm|': 1, '|usercount|': 1,\n    '|nametaken|': 1, '|challstr|': 1, '|updateuser|': 1, '|formats|': 1, '|updatesearch|': 1,\n    '|message|': 1, '|updatechallenges|': 1, '|queryresponse|': 1, '|unlink|': 1, '|raw|': 1,\n    '|error|': 1, '|bigerror|': 1, '|chatmsg|': 1, '|chatmsg-raw|': 1, '|controlshtml|': 1,\n    '|fieldhtml|': 1, '|debug|': 1, '|deinit|': 1, '|selectorhtml|': 1, '|refresh|': 1,\n    '|tempnotify|': 1, '|tempnotifyoff|': 1, '|noinit|': 1, '|hidelines|': 1, '|expire|': 1,\n    '|askreg|': 1, '|tournament|create|': 1, '|tournament|update|': 1, '|tournament|updateEnd|': 1,\n    '|tournament|error|': 1, '|tournament|forceend|': 1, '|tournament|join|': 1,\n    '|tournament|leave|': 1, '|tournament|replace|': 1, '|tournament|start|': 1,\n    '|tournament|disqualify|': 1, '|tournament|battlestart|': 1, '|tournament|battleend|': 1,\n    '|tournament|end|': 1, '|tournament|scouting|': 1, '|tournament|autostart|': 1,\n    '|tournament|autodq|': 1, '|player|': 1, '|teamsize|': 1, '|gametype|': 1, '|gen|': 1,\n    '|tier|': 1, '|rated|': 1, '|seed|': 1, '|rule|': 1, '|teampreview|': 1,\n    '|clearpoke|': 1, '|poke|': 1, '|start|': 1, '|done|': 1, '|request|': 1, '|inactive|': 1,\n    '|inactiveoff|': 1, '|upkeep|': 1, '|turn|': 1, '|win|': 1, '|tie|': 1, '|move|': 1,\n    '|switch|': 1, '|drag|': 1, '|detailschange|': 1, '|replace|': 1, '|swap|': 1, '|cant|': 1,\n    '|faint|': 1, '|-formechange|': 1, '|-fail|': 1, '|-block|': 1, '|-notarget|': 1, '|-miss|': 1,\n    '|-damage|': 1, '|-heal|': 1, '|-sethp|': 1, '|-status|': 1, '|-curestatus|': 1,\n    '|-cureteam|': 1, '|-boost|': 1, '|-unboost|': 1, '|-setboost|': 1, '|-swapboost|': 1,\n    '|-invertboost|': 1, '|-clearboost|': 1, '|-clearallboost|': 1, '|-clearpositiveboost|': 1,\n    '|-ohko|': 1, '|-clearnegativeboost|': 1, '|-copyboost|': 1, '|-weather|': 1,\n    '|-fieldstart|': 1, '|-fieldend|': 1, '|-sidestart|': 1, '|-sideend|': 1, '|-start|': 1,\n    '|-end|': 1, '|-crit|': 1, '|-supereffective|': 1, '|-resisted|': 1, '|-immune|': 1,\n    '|-item|': 1, '|-enditem|': 1, '|-ability|': 1, '|-endability|': 1, '|-transform|': 1,\n    '|-mega|': 1, '|-primal|': 1, '|-burst|': 1, '|-zpower|': 1, '|-zbroken|': 1, '|-activate|': 1,\n    '|-fieldactivate|': 1, '|-hint|': 1, '|-center|': 1, '|-message|': 1, '|-combine|': 1,\n    '|-waiting|': 1, '|-prepare|': 1, '|-mustrecharge|': 1, '|-hitcount|': 1, '|-singlemove|': 1,\n    '|-singleturn|': 1, '|-anim|': 1, '|warning|': 1, '|-candynamax|': 1, '|updatepoke|': 1,\n    '|-swapsideconditions|': 1, '|-terastallize|': 1, '|sentchoice|': 1, '|customgroups|': 1,\n  };\n  ARGS_WITH_KWARGS: {[k in Protocol.ArgsWithKWArgName]: 1} = {\n    '|move|': 1, '|switch|': 1, '|cant|': 1, '|-formechange|': 1, '|-fail|': 1,\n    '|-block|': 1, '|-damage|': 1, '|-heal|': 1, '|-sethp|': 1, '|-status|': 1, '|swap|': 1,\n    '|-curestatus|': 1, '|-cureteam|': 1, '|-boost|': 1, '|-unboost|': 1, '|-setboost|': 1,\n    '|-swapboost|': 1, '|-invertboost|': 1, '|-clearnegativeboost|': 1, '|-weather|': 1,\n    '|-fieldstart|': 1, '|-fieldend|': 1, '|-sidestart|': 1, '|-singlemove|': 1,\n    '|-sideend|': 1, '|-start|': 1, '|-end|': 1, '|-immune|': 1, '|-item|': 1, '|-enditem|': 1,\n    '|-ability|': 1, '|-endability|': 1, '|-transform|': 1, '|-activate|': 1, '|-singleturn|': 1,\n    '|-clearallboost|': 1, '|-anim|': 1, '|-copyboost|': 1, '|-clearboost|': 1, '|-miss|': 1,\n  };\n\n  *parse(data: string) {\n    const lines = data.split('\\n');\n    let roomid = '' as Protocol.RoomID;\n    for (const [i, line] of lines.entries()) {\n      if (i === 0 && line[0] === '>') {\n        roomid = line.slice(1) as Protocol.RoomID;\n        continue;\n      } else if (line) {\n        const {args, kwArgs} = this.parseBattleLine(line);\n        yield {roomid, args, kwArgs};\n      }\n    }\n  }\n\n  key(args: Protocol.ArgType, raw = false): Protocol.ArgName | undefined {\n    const key = (args[0] === 'tournament'\n      ? `|${args[0]}|${args[1]}|`\n      : `|${args[0]}|`) as Protocol.ArgName;\n    return (raw || key in this.ARGS) ? key : undefined;\n  }\n\n  parseLine(line: string, noDefault?: boolean): Protocol.ArgType | null {\n    if (!line.startsWith('|')) return ['', line] as const as Protocol.RoomMessageArgs['||'];\n    if (line === '|') return ['done'];\n    const index = line.indexOf('|', 1);\n    const cmd = line.slice(1, index);\n    switch (cmd) {\n      case 'chatmsg': case 'chatmsg-raw': case 'raw': case 'error': case 'html':\n      case 'inactive': case 'inactiveoff': case 'warning':\n      case 'fieldhtml': case 'controlshtml': case 'bigerror':\n      case 'debug': case 'tier': case 'challstr': case 'popup': case '':\n        return upgradeArgs([cmd, line.slice(index + 1)]);\n      case 'c': case 'chat': case 'uhtml': case 'uhtmlchange':\n      // three parts\n        const index2a = line.indexOf('|', index + 1);\n        return upgradeArgs([cmd, line.slice(index + 1, index2a), line.slice(index2a + 1)]);\n      case 'c:': case 'pm':\n      // four parts\n        const index2b = line.indexOf('|', index + 1);\n        const index3b = line.indexOf('|', index2b + 1);\n        return upgradeArgs([\n          cmd,\n          line.slice(index + 1, index2b),\n          line.slice(index2b + 1, index3b),\n          line.slice(index3b + 1),\n        ]);\n    }\n    if (noDefault) return null;\n    return upgradeArgs(line.slice(1).split('|') as [string, ...string[]]);\n  }\n\n  parseBattleLine(line: string) {\n    let args = Protocol.parseLine(line, true) as [string, ...string[]];\n    if (args) return {args: args as Protocol.ArgType, kwArgs: {}};\n\n    args = line.slice(1).split('|') as [string, ...string[]];\n    const kwArgs: {[kw: string]: string | true} = {};\n    while (args.length > 1) {\n      const lastArg = args[args.length - 1];\n      if (lastArg.charAt(0) !== '[') break;\n      const bracketPos = lastArg.indexOf(']');\n      if (bracketPos <= 0) break;\n      // default to '.' so it evaluates to boolean true\n      kwArgs[lastArg.slice(1, bracketPos)] = lastArg.slice(bracketPos + 1).trim() || true;\n      args.pop();\n    }\n\n    return upgradeBattleArgs({\n      args: upgradeArgs(args), kwArgs,\n    }) as {\n      args: Protocol.BattleArgType;\n      kwArgs: Protocol.BattleArgsKWArgType;\n    };\n  }\n\n  parsePokemonIdent(pokemon: Protocol.PokemonIdent) {\n    const index = pokemon.indexOf(':');\n    const position = pokemon.slice(0, index);\n    const name = pokemon.slice(index + 2);\n\n    let player: Player;\n    let letter: Protocol.PositionLetter | null;\n    if (position.length < 3) {\n      player = position as Player;\n      letter = null;\n    } else {\n      player = position.slice(0, 2) as Player;\n      letter = position.charAt(2) as Protocol.PositionLetter;\n    }\n\n    return {player, position: letter, name};\n  }\n\n  parseDetails(\n    name: string,\n    ident: Protocol.PokemonIdent,\n    details = '' as Protocol.PokemonDetails,\n    output = {} as DetailedPokemon\n  ) {\n    output.details = details;\n\n    const isTeamPreview = !name;\n    output.name = name;\n    output.speciesForme = name;\n    output.level = 100;\n    output.shiny = false;\n    output.gender = undefined;\n    output.ident = !isTeamPreview ? ident : '' as Protocol.PokemonIdent;\n    output.searchid = (!isTeamPreview ? `${ident}|${details}` : '') as Protocol.PokemonSearchID;\n\n    const splitDetails = details.split(', ');\n    if (splitDetails[splitDetails.length - 1].startsWith('tera:')) {\n      output.terastallized = splitDetails[splitDetails.length - 1].slice(5) as TypeName;\n      splitDetails.pop();\n    }\n    if (splitDetails[splitDetails.length - 1] === 'shiny') {\n      output.shiny = true;\n      splitDetails.pop();\n    }\n    const gender = splitDetails[splitDetails.length - 1];\n    if (gender === 'M' || gender === 'F') {\n      output.gender = gender;\n      splitDetails.pop();\n    }\n    if (splitDetails[1]) output.level = parseInt(splitDetails[1].substr(1)) || 100;\n    if (splitDetails[0]) output.speciesForme = splitDetails[0];\n    return output;\n  }\n\n  parseHealth(hpstring: Protocol.PokemonHPStatus, output = {} as PokemonHealth) {\n    const [hp, status] = hpstring.split(' ');\n\n    // parse hp\n    output.hpcolor = '';\n    if (hp === '0' || hp === '0.0') {\n      if (!output.maxhp) output.maxhp = 100;\n      output.hp = 0;\n    } else if (hp.indexOf('/') > 0) {\n      const [curhp, maxhp] = hp.split('/');\n      if (isNaN(parseFloat(curhp)) || isNaN(parseFloat(maxhp))) {\n        return null;\n      }\n      output.hp = parseFloat(curhp);\n      output.maxhp = parseFloat(maxhp);\n      if (output.hp > output.maxhp) output.hp = output.maxhp;\n      const colorchar = maxhp.slice(-1);\n      if (colorchar === 'y' || colorchar === 'g') {\n        output.hpcolor = colorchar;\n      }\n    } else if (!isNaN(parseFloat(hp))) {\n      if (!output.maxhp) output.maxhp = 100;\n      output.hp = (output.maxhp * parseFloat(hp)) / 100;\n    }\n\n    // parse status\n    if (!status) {\n      output.status = undefined;\n    } else if (\n      status === 'par' ||\n      status === 'brn' ||\n      status === 'slp' ||\n      status === 'frz' ||\n      status === 'tox'\n    ) {\n      output.status = status;\n    } else if (status === 'psn' && output.status !== 'tox') {\n      output.status = status;\n    } else if (status === 'fnt') {\n      output.hp = 0;\n      output.fainted = true;\n    }\n    return output;\n  }\n\n  parseEffect(\n    effect?: string, fn = (s: string) => s.trim()\n  ): {name: string; type?: 'move' | 'item' | 'ability'} {\n    if (!effect) return {name: fn('')};\n    if (effect.startsWith('item:') || effect.startsWith('move:')) {\n      return {name: fn(effect.slice(5)), type: effect.slice(0, 4) as 'move' | 'item'};\n    } else if (effect.startsWith('ability:')) {\n      return {name: fn(effect.slice(8)), type: 'ability'};\n    }\n    return {name: fn(effect)};\n  }\n\n  parseRequest(json: Protocol.RequestJSON) {\n    const request = JSON.parse(json);\n    if (!request.requestType) {\n      request.requestType = 'move';\n      if (request.forceSwitch) {\n        request.requestType = 'switch';\n      } else if (request.teamPreview) {\n        request.requestType = 'team';\n      } else if (request.wait) {\n        request.requestType = 'wait';\n      }\n    }\n\n    if (request.requestType === 'wait') request.noCancel = true;\n    if (request.side) {\n      for (const pokemon of request.side.pokemon) {\n        this.parseDetails(pokemon.ident.substr(4), pokemon.ident, pokemon.details, pokemon);\n        this.parseHealth(pokemon.condition, pokemon);\n        pokemon.ability = pokemon.ability || pokemon.baseAbility;\n      }\n    }\n\n    if (request.active) {\n      request.active = request.active.map((active: any, i: number) =>\n        request.side.pokemon[i].fainted ? null : active);\n      for (const active of request.active) {\n        if (!active) continue;\n        for (const move of active.moves) {\n          if (move.move) move.name = move.move;\n          move.id = toID(move.name);\n        }\n        if (active.maxMoves) {\n          if (active.maxMoves.maxMoves) {\n            active.canGigantamax = active.maxMoves.gigantamax;\n            active.maxMoves = active.maxMoves.maxMoves;\n          }\n          for (const move of active.maxMoves) {\n            move.id = move.move;\n          }\n        }\n        if (active.canZMove) {\n          active.zMoves = active.canZMove;\n          for (const move of active.zMoves) {\n            if (!move) continue;\n            if (move.move) move.name = move.move;\n            move.id = toID(move.name);\n          }\n        }\n      }\n    }\n\n    return request as Protocol.Request;\n  }\n\n  parseChallenges(json: Protocol.ChallengesJSON) {\n    return JSON.parse(json) as Protocol.Challenges;\n  }\n\n  parseSearchState(json: Protocol.SearchStateJSON) {\n    return JSON.parse(json) as Protocol.SearchState;\n  }\n\n  parseTournamentUpdate(json: Protocol.TournamentUpdateJSON) {\n    return JSON.parse(json) as Protocol.TournamentUpdate;\n  }\n\n  parseCustomGroupsJSON(json: Protocol.CustomGroupsJSON) {\n    return JSON.parse(json) as Protocol.CustomGroups;\n  }\n\n  parseNameParts(text: string) {\n    let group = '';\n    // names can't start with a symbol\n    if (!/[A-Za-z0-9]/.test(text.charAt(0))) {\n      group = text.charAt(0);\n      text = text.slice(1);\n    }\n\n    let name = text;\n    const atIndex = text.indexOf('@');\n    let status = '';\n    let away = false;\n    if (atIndex > 0) {\n      name = text.slice(0, atIndex);\n      status = text.slice(atIndex + 1);\n      if (status.startsWith('!')) {\n        away = true;\n        status = status.slice(1);\n      }\n    }\n    return {group, name, away, status};\n  }\n};\n\nfunction upgradeArgs<T extends Protocol.ArgType>(args: [string, ...string[]]): T {\n  switch (args[0]) {\n    case 'name': case 'n': case 'N': {\n      const [cmd, user, oldid] = args;\n      return ['name', user, oldid, cmd === 'N'] as const as unknown as T;\n    }\n    case 'chat': case 'c': {\n      const [, user, message] = args;\n      return ['chat', user, message] as const as unknown as T;\n    }\n    case 'join': case 'j': case 'J': {\n      const [cmd, user] = args;\n      return ['join', user, cmd === 'J'] as const as unknown as T;\n    }\n    case 'leave': case 'l': case 'L': {\n      const [cmd, user] = args;\n      return ['leave', user, cmd === 'L'] as const as unknown as T;\n    }\n    case 'battle': case 'b': {\n      const [, roomid, user1, user2] = args;\n      return ['battle', roomid, user1, user2] as const as unknown as T;\n    }\n  }\n  return args as T;\n}\n\nconst ACTIVATE_BLOCKABLE = new Set([\n  'ingrain', 'quickguard', 'wideguard', 'craftyshield', 'matblock',\n  'protect', 'mist', 'safeguard', 'electricterrain', 'mistyterrain',\n  'psychicterrain', 'telepathy', 'stickyhold', 'suctioncups', 'aromaveil',\n  'flowerveil', 'sweetveil', 'disguise', 'safetygoggles', 'protectivepads',\n]);\nconst CANT_BLOCKABLE = new Set([\n  'ability: Damp', 'ability: Dazzling', 'ability: Queenly Majesty', 'ability: Armor Tail',\n]);\nconst STARTABLE = new Set([\n  'thundercage', 'clamp', 'whirlpool', 'firespin', 'magmastorm',\n  'sandtomb', 'infestation', 'trapped', 'bind', 'snaptrap', 'wrap',\n]);\nconst NUMBERABLE = new Set([\n  'eeriespell', 'gmaxdepletion', 'spite', 'grudge',\n  'forewarn', 'sketch', 'leppaberry', 'mysteryberry',\n]);\nconst HEALING = new Set(['dryskin', 'eartheater', 'voltabsorb', 'waterabsorb']);\n\nfunction upgradeBattleArgs({args, kwArgs}: {\n  args: Protocol.BattleArgType;\n  kwArgs: {[kw: string]: string | true | undefined};\n}): {args: Protocol.BattleArgType; kwArgs: Protocol.BattleArgsKWArgType} {\n  switch (args[0]) {\n    case '-activate': {\n      if (kwArgs.item || kwArgs.move || kwArgs.number || kwArgs.ability) return {args, kwArgs};\n      const [, pokemon, e, arg3, arg4] = args;\n      const effect = e as Protocol.EffectName;\n\n      const target = kwArgs.of as Protocol.PokemonIdent | '';\n      const id = Protocol.parseEffect(effect, toID).name;\n\n      if (kwArgs.block) return {args: ['-fail', pokemon as Protocol.PokemonIdent], kwArgs};\n      if (id === 'sturdy') {\n        return {args: ['-activate', pokemon, 'ability: Sturdy' as Protocol.EffectName], kwArgs};\n      }\n      if (id === 'wonderguard') {\n        return {\n          args: ['-immune', pokemon as Protocol.PokemonIdent],\n          kwArgs: {from: 'ability: Wonder Guard'} as Protocol.BattleArgsKWArgType,\n        };\n      }\n      if (id === 'beatup' && kwArgs.of) {\n        return {args, kwArgs: {name: kwArgs.of as Protocol.Nickname}};\n      }\n      if (ACTIVATE_BLOCKABLE.has(id)) {\n        if (target) {\n          kwArgs.of = pokemon;\n          return {args: ['-block', target, effect, arg3 as Protocol.MoveName || ''], kwArgs};\n        }\n        return {\n          args: [\n            '-block', pokemon as Protocol.PokemonIdent, effect, arg3 as Protocol.MoveName || '',\n          ],\n          kwArgs,\n        };\n      }\n\n      if (id === 'charge') {\n        return {\n          args: ['-singlemove', pokemon as Protocol.PokemonIdent, 'Charge' as Protocol.MoveName],\n          kwArgs: {of: target || undefined},\n        };\n      }\n      if (STARTABLE.has(id)) {\n        return {\n          args: ['-start', pokemon as Protocol.PokemonIdent, effect],\n          kwArgs: {of: target as Protocol.PokemonIdent || ''} as Protocol.BattleArgsKWArgType,\n        };\n      }\n      if (id === 'fairylock') return {args: ['-fieldactivate', effect], kwArgs: {}};\n\n      if (id === 'symbiosis' || id === 'poltergeist') {\n        kwArgs.item = arg3;\n      } else if (id === 'magnitude') {\n        kwArgs.number = arg3;\n      } else if (id === 'skillswap' || id === 'mummy' || id === 'lingeringaroma') {\n        kwArgs.ability = arg3;\n        kwArgs.ability2 = arg4;\n      } else if (id === 'wanderingspirit') {\n      // FIXME: workaround for an interaction between Wandering Spirit and Protective Pads\n        if (arg3) {\n          kwArgs.ability = arg3;\n          kwArgs.ability2 = arg4;\n        } else {\n          return {\n            args: [\n              '-ability',\n              pokemon as Protocol.PokemonIdent,\n              'Wandering Spirit' as Protocol.AbilityName,\n            ],\n            kwArgs: {},\n          };\n        }\n      } else if (NUMBERABLE.has(id)) {\n        kwArgs.move = arg3;\n        kwArgs.number = arg4;\n      }\n      return {\n        args: [\n          '-activate',\n          pokemon as Protocol.PokemonIdent,\n          effect,\n          target as Protocol.PokemonIdent || '',\n        ],\n        kwArgs,\n      };\n    }\n    case '-start': {\n      if (kwArgs.from === 'Protean' || kwArgs.from === 'Color Change') {\n        kwArgs.from = 'ability:' + kwArgs.from;\n      }\n      break;\n    }\n    case 'move': {\n      if (kwArgs.from === 'Magic Bounce') kwArgs.from = 'ability: Magic Bounce';\n      break;\n    }\n    case 'cant': {\n      const [, pokemon, effect, move] = args;\n      if (CANT_BLOCKABLE.has(effect as Protocol.EffectName)) {\n        return {\n          args: [\n            '-block',\n            pokemon,\n            effect as Protocol.EffectName,\n            move as Protocol.MoveName,\n            kwArgs.of as Protocol.PokemonIdent || '',\n          ],\n          kwArgs: {},\n        };\n      }\n      break;\n    }\n    case '-heal': {\n      const id = Protocol.parseEffect(kwArgs.from as string, toID).name;\n      if (HEALING.has(id)) kwArgs.of = '';\n      break;\n    }\n    case 'gen': {\n      const [, num] = args;\n      return {args: ['gen', Number(num) as GenerationNum], kwArgs: {}};\n    }\n    // @ts-ignore\n    case '-restoreboost': {\n      // @ts-ignore\n      args[0] = '-clearnegativeboost';\n      break;\n    }\n    // @ts-ignore\n    case '-nothing':\n    // OLD: |-nothing\n    // NEW: |-activate||move:Splash\n      args = [\n        '-activate', '' as Protocol.PokemonIdent,\n        'move: Splash' as Protocol.EffectName,\n      ] as Protocol.Args['|-activate|'];\n  }\n\n  return {args, kwArgs};\n}\n","const URL = 'https://play.pokemonshowdown.com/';\nconst CAPTCHA = 'Pikachu';\nconst CONTENT_TYPE = 'application/x-www-form-urlencoded; encoding=UTF-8';\n\n/** Details required when logging in. */\nexport interface LoginDetails {\n  username: string;\n  challstr: string;\n  password?: string;\n  serverid?: string;\n  url?: string;\n}\n\n/** Details required when registering. */\nexport interface RegistrationDetails extends LoginDetails {\n  password: string;\n  cpassword?: string;\n  captcha?: string;\n}\n\n/** Information requested to make a request and handle the response. */\nexport interface Action {\n  method: 'GET' | 'POST';\n  headers: {[key: string]: string | number};\n  url: string;\n  data: string;\n  responseType: 'text';\n  onResponse: (data: string) => string | undefined;\n}\n\ninterface Response {\n  assertion?: string;\n  curuser?: {\n    username: string;\n    loggedin: boolean;\n  };\n  error?: string;\n  actionerror?: string;\n}\n\ntype ID = (string & { __brand: 'ID'}) | (string & { __isID: true }) | '';\n\n/** Register with the server. */\nexport function register(details: RegistrationDetails): Action {\n  return {\n    ...action('register', details, querystring({\n      serverid: details.serverid,\n      username: details.username,\n      password: details.password,\n      cpassword: details.cpassword ?? details.password,\n      captcha: details.captcha ?? CAPTCHA,\n      challstr: details.challstr,\n    })),\n    onResponse: (data?: string) => {\n      const response = safeJSON(data) as Response;\n      if (response.curuser?.loggedin) {\n        return next(details, response.assertion!);\n      } else {\n        return error(details, response);\n      }\n    },\n  };\n}\n\n/** Log in to the server (or rename if no password is provided). */\nexport function login(details: LoginDetails): Action {\n  if (!details.password) return rename(details);\n  return {\n    ...action('login', details, querystring({\n      serverid: details.serverid,\n      name: details.username,\n      pass: details.password,\n      challstr: details.challstr,\n    })),\n    onResponse: (data?: string) => {\n      const response = safeJSON(data) as Response;\n      if (response.curuser?.loggedin) {\n        return next(details, response.assertion!);\n      } else {\n        return error(details, response);\n      }\n    },\n  };\n}\n\n/** Attempts to upkeep an existing session with the server (requires cookies). */\nexport function upkeep(details: LoginDetails): Action {\n  return {\n    ...action('upkeep', details, querystring({\n      serverid: details.serverid,\n      challstr: details.challstr,\n    })),\n    onResponse: (data?: string) => {\n      const response = safeJSON(data) as {username?: string; assertion: string};\n      if (!response.username) return undefined;\n      return next({...details, username: response.username}, response.assertion);\n    },\n  };\n}\n\n/** Change the name of the connected user (or login if a password is provided). */\nexport function rename(details: LoginDetails): Action {\n  if (details.password) return login(details);\n  return {\n    ...action('getassertion', details, querystring({\n      serverid: details.serverid,\n      userid: toID(details.username),\n      challstr: details.challstr,\n    })),\n    onResponse: (assertion: string) => next(details, assertion),\n  };\n}\n\n/** Log out from the server (but remain connected as a guest). */\nexport function logout(details: Omit<LoginDetails, 'challstr'>): Action {\n  return {\n    ...action('logout', details, querystring({\n      serverid: details.serverid,\n      userid: toID(details.username),\n    })),\n    onResponse: () => '|/logout',\n  };\n}\n\nfunction action(\n  api: 'register' | 'login' | 'upkeep' | 'getassertion' | 'logout',\n  details: {url?: string},\n  data: string\n): Omit<Action, 'onResponse'> {\n  return {\n    method: 'POST',\n    url: `${(details?.url || URL)}api/${api}`,\n    headers: {\n      'Content-Type': CONTENT_TYPE,\n      'Content-Length': data.length,\n    },\n    data,\n    responseType: 'text',\n  };\n}\n\nfunction querystring(data: {[key: string]: string | undefined}) {\n  // This naive approach is only safe because it is only intended for use for a very narrow range\n  // of values we need to deal with when dealing with the Pokémon Showdown login server.\n  const buf = [];\n  for (const key in data) {\n    if (data[key] === undefined) continue;\n    buf.push(`${key}=${encodeURIComponent(data[key]!)}`);\n  }\n  return buf.join('&');\n}\n\nfunction safeJSON(data?: string) {\n  if (!data || data.length < 1) throw new Error('No data received');\n  if (data[0] === ']') data = data.substr(1);\n  return JSON.parse(data);\n}\n\nfunction toID(text: any): ID {\n  if (text?.id) text = text.id;\n  if (typeof text !== 'string' && typeof text !== 'number') return '';\n  return ('' + text).toLowerCase().replace(/[^a-z0-9]+/g, '') as ID;\n}\n\nfunction next(details: LoginDetails, assertion: string) {\n  return `|/trn ${details.username},0,${process(details, assertion)}`;\n}\n\nfunction error(details: {username: string}, response: Response): never {\n  const err = response.error || response.actionerror;\n  if (err) throw new Error(err);\n  void process(details, response.assertion || '');\n  throw new Error(`Received unexpected response: ']${JSON.stringify(response)}'`);\n}\n\nfunction process(details: {username: string}, assertion: string) {\n  if (assertion.slice(0, 14).toLowerCase() === '<!doctype html') {\n    // some sort of MitM proxy - ignore it\n    const endIndex = assertion.indexOf('>');\n    if (endIndex > 0) assertion = assertion.slice(endIndex + 1);\n  }\n\n  if (assertion.startsWith('\\r')) assertion = assertion.slice(1);\n  if (assertion.startsWith('\\n')) assertion = assertion.slice(1);\n  if (assertion.includes('<')) {\n    throw new Error('Something appears to be interfering with the connection');\n  } else if (assertion === ';') {\n    throw new Error(`Authentication required for '${details.username}'`);\n  } else if (assertion === ';;@gmail') {\n    throw new Error(`Authentication from Google required for '${details.username}'`);\n  } else if (assertion.startsWith(';;')) {\n    throw new Error(`Invalid name: ${assertion.substr(2)}`);\n  } else if (assertion.includes('\\n') || !assertion) {\n    throw new Error('Something appears to be interfering with the connection');\n  }\n\n  return assertion;\n}\n\n/** Collection of tools for interacting with Pokémon Showdown's login server. */\nexport const Actions = {register, login, upkeep, rename, logout};\n","// https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit\nconst colors = {\n    black: \"\\x1b[30m\",\n    red: \"\\x1b[31m\",\n    green: \"\\x1b[32m\",\n    yellow: \"\\x1b[33m\",\n    blue: \"\\x1b[34m\",\n    magenta: \"\\x1b[35m\",\n    cyan: \"\\x1b[36m\",\n    white: \"\\x1b[37m\",\n    none: \"\"\n};\n\ntype Color = typeof colors[keyof typeof colors];\n\nfunction print(message: string, fn: (message?: any) => void = console.log, color: Color = colors.none) {\n    fn(`${color}${message}`);\n}\n\nexport { colors, print };","import { colors, print } from \"./print-colored\";\n\nconst server = 'sim.smogon.com';\nconst serverport = 8000;\n\nclass Connection {\n    ws!: WebSocket;\n    \n    open(fn: (data: string | ArrayBufferLike | Blob | ArrayBufferView) => void) {\n        this.ws = new WebSocket(`ws://${server}:${serverport}/showdown/websocket`);\n        this.ws.onmessage = ({ data }) => {\n            print(`Message received:\\n${data}`, console.debug, colors.cyan);\n            fn(data);\n        };\n        this.ws.onopen = () => {\n            print(`Connected to ${this.ws.url}`);\n        };\n        this.ws.onclose = e => {\n            const clean = e.wasClean ? ' cleanly ' : ' ';\n            const reason = e.reason ? `: ${e.reason}` : '';\n            print(`Disconnected${clean}from ${this.ws.url} with ${e.code}${reason}`);\n        };\n        this.ws.onerror = e => {\n            const msg = (e as ErrorEvent).message;\n            if (msg === 'TIMEOUT') return;\n            print(`Connection error${msg ? `: ${msg}` : ''}`, console.error);\n        };\n    }\n\n    close() {\n        this.ws.close();\n    }\n\n    send(message: string | ArrayBufferLike | Blob | ArrayBufferView) {\n        this.ws.send(message);\n        print(`Message sent:\\n${message}`, console.debug, colors.green);\n    }\n}\n\nexport default Connection;\n","import Connection from \"./connection\";\n\nexport default class User extends Connection {\n    roomid = '';\n    \n    send(message: string | ArrayBufferLike | Blob | ArrayBufferView): void {\n        super.send((this.roomid ? `>${this.roomid}\\n` : '') + message);\n    }\n\n    sendCommand(command: string, args: string[] = []) {\n        this.send(`/${command} ${args.join(', ')}`);\n    }\n}\n","import { Protocol } from \"@pkmn/protocol\";\nimport { Actions } from \"@pkmn/login\";\nimport { print } from \"./print-colored\";\nimport { PUZZLE_DEFAULTS, Puzzle } from \"./puzzle\";\nimport User from \"./user\";\nimport { Sets } from \"@pkmn/sets\";\n\nconst self = globalThis;\n\nself.onmessage = ({ data }) => {\n    const BYPASS_CORS = 'https://corsproxy.io/?';\n    const { username, password, puzzle, challenger }: { username: string, password: string, puzzle: Puzzle, challenger: string } = data;\n    const user = new User();\n\n    // Create new instance of anonymous class which implements handler\n    // This will handle all communications sent from Showdown \n    const handler = new class implements Protocol.Handler {\n        async '|challstr|'(args: Protocol.Args['|challstr|']) {\n            const challstr = args[1];\n            const action = Actions.login({ username, password, challstr });\n            const response = await (await fetch(BYPASS_CORS + action.url, {\n                method: action.method,\n                headers: action.headers as HeadersInit,\n                body: action.data,\n            })).text();\n            const cmd = action.onResponse(response);\n            if (cmd)\n                user.send(cmd);\n            if (puzzle.avatar) {\n                user.sendCommand('avatar', [puzzle.avatar]);\n            }\n            this.challenge()\n        }\n\n        '|updateuser|'(args: Protocol.Args['|updateuser|']) {\n            print(`Logged in as \\`${args[1].trim()}\\` with avatar \\`${args[3]}\\``);\n        }\n\n        '|init|'(args: Protocol.Args['|init|']) {\n            print(`Beginning ${args[1]}`);\n        }\n\n        '|request|'(args: Protocol.Args['|request|']) {\n            const json = args[1];\n            if (json) {\n                const { active, side } = JSON.parse(args[1]);\n                // TODO: Puzzle command logic\n            }\n        }\n\n        '|-crit|'(args: Protocol.Args['|-crit|']) {\n            if (!puzzle.crits) {\n                user.send(`Critical hit detected. Aborting puzzle and resending a challenge to ${challenger}.`);\n                user.sendCommand('forfeit');\n                this.challenge()\n            }\n        }\n\n        challenge() {\n            user.sendCommand('challenge', [challenger, /*puzzle.team?.format as string*/'gen9nationaldexubers']);\n        }\n    }();\n\n    // Open connection with message handler\n    user.open(data => {\n        // Parse each line of data\n        const parser = Protocol.parse(data.toString());\n        let current = parser.next();\n        while (!current.done) {\n            // Call the corresponding handler function with the correct args and kwArgs\n            const { roomid, args, kwArgs } = current.value;\n            const key = Protocol.key(args);\n            if (key && key in handler) {\n                user.roomid = roomid;\n                (handler as any)[`${key}`](args, kwArgs);\n            }\n\n            current = parser.next();\n        }\n    });\n};\n"],"names":["toID","s","toLowerCase","replace","Protocol","constructor","ARGS","ARGS_WITH_KWARGS","parse","data","lines","split","roomid","i","line","entries","args","kwArgs","this","parseBattleLine","slice","key","raw","arguments","length","undefined","concat","parseLine","noDefault","startsWith","index","indexOf","cmd","upgradeArgs","index2a","index2b","index3b","lastArg","charAt","bracketPos","trim","pop","_ref","item","move","number","ability","pokemon","e","arg3","arg4","effect","target","of","id","parseEffect","name","block","from","ACTIVATE_BLOCKABLE","has","STARTABLE","ability2","NUMBERABLE","CANT_BLOCKABLE","HEALING","num","Number","upgradeBattleArgs","parsePokemonIdent","position","player","letter","parseDetails","ident","details","output","isTeamPreview","speciesForme","level","shiny","gender","searchid","splitDetails","terastallized","parseInt","substr","parseHealth","hpstring","hp","status","hpcolor","maxhp","curhp","isNaN","parseFloat","colorchar","fainted","fn","type","parseRequest","json","request","JSON","requestType","forceSwitch","teamPreview","wait","noCancel","side","condition","baseAbility","active","map","moves","maxMoves","canGigantamax","gigantamax","canZMove","zMoves","parseChallenges","parseSearchState","parseTournamentUpdate","parseCustomGroupsJSON","parseNameParts","text","group","test","atIndex","away","user","oldid","message","user1","user2","Set","URL","CONTENT_TYPE","login","password","action","querystring","serverid","username","pass","challstr","onResponse","_a","response","safeJSON","curuser","loggedin","next","assertion","error","rename","userid","api","method","url","headers","responseType","buf","push","encodeURIComponent","join","Error","process","err","actionerror","stringify","endIndex","includes","Actions","register","_b","cpassword","captcha","_a2","upkeep","logout","colors","print","console","log","ws","open","WebSocket","onmessage","debug","onopen","onclose","clean","wasClean","reason","code","onerror","msg","close","send","User","Connection","super","sendCommand","command","globalThis","puzzle","challenger","handler","fetch","body","avatar","challenge","crits","parser","toString","current","done","value"],"sourceRoot":""}